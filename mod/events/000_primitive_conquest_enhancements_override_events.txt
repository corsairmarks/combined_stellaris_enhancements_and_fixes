namespace = action
namespace = necroids

# Modified: code simplification
# triggered by on_planet_attackers_win
# root = country, leader attacker
# from = country, planet owner
# fromfrom = planet
country_event = {
	id = action.14
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		from = { is_primitive = yes }
		is_country_type = default
	}
	immediate = {
		log = "pre-FTL conquest: [FromFrom.GetName] ([From.GetName]) conquered by the [Root.GetName]"
		save_event_target_as = conquering_country
		from = {
			save_event_target_as = actually_conquered_primitive_country
			owner_species = {
				save_event_target_as = conquered_primitive_species
				set_timed_species_flag = {
					flag = primitive_species
					years = 10
				}
			}
		}
		fromfrom = {
			save_event_target_as = conquered_primitive_country
			if = {
				limit = { event_target:conquering_country = { is_regular_empire = yes } }
				add_modifier = {
					modifier = planet_culture_shock
					years = 10
				}
			}
			set_owner = event_target:conquering_country
		}
		every_playable_country = {
			limit = {
				has_communications = event_target:conquering_country
				NOT = { is_country = event_target:conquering_country }
			}
			add_opinion_modifier = {
				who = event_target:conquering_country
				modifier = opinion_primitive_violation
			}
		}
		country_event = {
			id = action.140
		}
		reset_years_of_peace = yes
	}
}

# Modified: no need for the immediate block due to primitive_conquest_enhancements.1
# chained from action.14, which is triggered for primitive planets by on_planet_attackers_win
# root = country that just conquered the planet
# event_target:conquered_primitive_country = the planet that was conquered (the default files use this name, including localisation - don't change it)
# event_target:conquered_primitive_species = the species that was conquered (the default files use this name, including localisation - don't change it)
country_event = {
	id = action.140
	title = action.14.name
	desc = { #Non-Purge Policy Regular Empires
		text = action.14.desc
		trigger = {
			is_gestalt = no
			NOT = {
				event_target:conquered_primitive_species = {
					has_citizenship_type = {
						country = root
						type = citizenship_purge
					}
				}
			}
		}
	}
	desc = { #Purge Policy Regular Empires
		text = action.14.desc.purge
		trigger = {
			is_gestalt = no
			event_target:conquered_primitive_species = {
				has_citizenship_type = {
					country = root
					type = citizenship_purge
				}
			}
		}
	}
	desc = { #Servitors
		text = action.14.desc.serv
		trigger = { has_civic = civic_machine_servitor }
	}
	desc = { #Assimilators
		text = action.14.desc.assim
		trigger = { has_civic = civic_machine_assimilator }
	}
	desc = { #Exterminators
		text = action.14.desc.term
		trigger = { has_civic = civic_machine_terminator }
	}
	desc = { #Purge Policy MIs
		text = action.14.desc.mach.purge
		trigger = {
			is_machine_empire = yes
			event_target:conquered_primitive_species = {
				has_citizenship_type = {
					country = root
					type = citizenship_purge
				}
			}
			NOR = {
				has_civic = civic_machine_servitor
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_terminator
			}
		}
	}
	desc = { #Enslave Policy MIs
		text = action.14.desc.mach.slave
		trigger = {
			is_machine_empire = yes
			event_target:conquered_primitive_species = {
				has_citizenship_type = {
					country = root
					type = citizenship_slavery
				}
			}
			NOR = {
				has_civic = civic_machine_servitor
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_terminator
			}
		}
	}
	desc = { #Purge Policy Hiveminds
		text = action.14.desc.hive.purge
		trigger = {
			is_hive_empire = yes
			event_target:conquered_primitive_species = {
				has_citizenship_type = {
					country = root
					type = citizenship_purge
				}
			}
		}
	}
	desc = { #Enslave Policy Hiveminds
		text = action.14.desc.hive.slave
		trigger = {
			is_hive_empire = yes
			event_target:conquered_primitive_species = {
				has_citizenship_type = {
					country = root
					type = citizenship_slavery
				}
			}
		}
	}
	picture = GFX_evt_ground_combat
	show_sound = event_alien_signal
	location = event_target:conquered_primitive_country
	is_triggered_only = yes
	option = {
		name = action.14.a.phobe
		custom_tooltip = action.14.a.tooltip
		trigger = { is_xenophobe = yes }
	}
	option = {
		name = action.14.a.military
		custom_tooltip = action.14.a.tooltip
		trigger = {
			is_militarist = yes
			is_xenophobe = no
		}
	}
	option = {
		name = action.14.a.spirit
		custom_tooltip = action.14.a.tooltip
		trigger = {
			is_spiritualist = yes
			is_xenophobe = no
			is_militarist = no
		}
	}
	option = {
		name = action.14.a.material
		custom_tooltip = action.14.a.tooltip
		trigger = {
			is_militarist = yes
			is_xenophobe = no
			is_militarist = no
		}
	}
	option = {
		name = action.14.a
		custom_tooltip = action.14.a.tooltip
		trigger = {
			is_xenophobe = no
			is_militarist = no
			is_spiritualist = no
			is_materialist = no
			is_hive_empire = no
			is_machine_empire = no
		}
	}
	option = {
		name = action.14.a
		trigger = { is_hive_empire = yes }
	}
	option = {
		name = action.14.a.serv
		trigger = { has_civic = civic_machine_servitor }
	}
	option = {
		name = action.14.a.assim
		trigger = { has_civic = civic_machine_assimilator }
	}
	option = {
		name = action.14.a.term
		trigger = { has_civic = civic_machine_terminator }
	}
	option = {
		name = action.14.a.mach
		trigger = {
			is_machine_empire = yes
			NOR = {
				has_civic = civic_machine_servitor
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_terminator
			}
		}
	}
}

# Modified: try not to depopulate the necrophage capital, be sure to trigger some conquest-related events
# scheduled to fire 4 times, 5 years apart by game_start.33, which itself is triggered by on_game_start_country
# root = a country with necrophage origin
country_event = {
	id = necroids.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = yes
	}
	immediate = {
		log = "necroids primitive 'conquest': helping the [Root.GetName] 'conquer' all primitives within its borders"
		save_event_target_as = necrophage_country
		# try to have 3 necrophage pops on every planet with planet_culture_shock
		every_owned_planet = {
			limit = {
				has_modifier = planet_culture_shock
				count_owned_pop = {
					count < 3
					limit = { is_same_species = event_target:necrophage_country }
				}
			}
			while = {
				count = 3
				limit = {
					count_owned_pop = {
						count < 3
						limit = { is_same_species = event_target:necrophage_country }
					}
				}
				if = {
					limit = {
						event_target:necrophage_country.capital_scope = {
							count_owned_pop = {
								count > 3
								limit = { is_same_species = event_target:necrophage_country }
							}
						}
					}
					event_target:necrophage_country.capital_scope = {
						random_owned_pop = {
							limit = {
								is_same_species = event_target:necrophage_country
								can_live_on_planet = prevprev
							}
							resettle_pop = {
								pop = this
								planet = prevprev
							}
							clear_pop_category = yes # in case a specialist/ruler was moved
						}
					}
				}
			}
			check_planet_employment = yes
		}
		# automatically take control of any primitives within borders
		every_planet_within_border = {
			limit = {
				is_colony = yes
				owner = { is_primitive = yes }
			}
			owner = { save_event_target_as = conquered_primitive_country }
			owner_species = {
				set_timed_species_flag = {
					flag = primitive_species
					years = 10
				}
				save_event_target_as = conquered_primitive_species
			}
			if = {
				limit = { has_observation_outpost = yes }
				observation_outpost = { dismantle = yes }
			}
			prev = { set_country_flag = keeping_leaders_infiltration@prev.owner }
			set_owner = event_target:necrophage_country
			add_modifier = {
				modifier = planet_culture_shock
				years = 10
			}
			# move 3 necrophage pops to the newly "conquered" planet
			if = {
				limit = {
					event_target:necrophage_country.capital_scope = {
						count_owned_pop = {
							count > 3
							limit = { is_same_species = event_target:necrophage_country }
						}
					}
				}
				while = {
					count = 3
					event_target:necrophage_country.capital_scope = {
						random_owned_pop = {
							limit = {
								is_same_species = event_target:necrophage_country
								can_live_on_planet = prevprev
							}
							resettle_pop = {
								pop = this
								planet = prevprev
							}
							clear_pop_category = yes # in case a specialist/ruler was moved
						}
					}
				}
			}
			check_planet_employment = yes
			planet_event = { # Crisis Menace Objective: Conquer a Colony
				id = crisis.5010
				scopes = {
					from = event_target:necrophage_country
				}
			}
			 # Imperialists are pleased
			planet_event = {
				id = action.84
			}
		}
	}
}