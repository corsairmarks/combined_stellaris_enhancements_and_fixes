namespace = action
namespace = necroids
namespace = observation

# triggered by on_planet_attackers_win
# ROOT = country, leader attacker
# FROM = country, planet owner
# FROMFROM = planet
country_event = {
	id = action.14
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		FROM = { is_country_type = primitive }
		is_country_type = default
	}
	immediate = {
		log = "primitive conquest: [FromFrom.GetName] conquered by the [Root.GetName]"
		save_event_target_as = conquering_country
		FROM = {
			save_event_target_as = actually_conquered_primitive_country
			owner_species = {
				save_event_target_as = conquered_primitive_species
				set_timed_species_flag = {
					flag = primitive_species
					years = 10
				}
			}
		}
		FROMFROM = {
			save_event_target_as = conquered_primitive_country
			fire_on_action = {
				on_action = on_primitive_planet_transferring
				scopes = {
					from = event_target:conquering_country
				}
			}
			if = {
				limit = { event_target:conquering_country = { is_regular_empire = yes } }
				add_modifier = {
					modifier = planet_culture_shock
					years = 10
				}
			}
			set_owner = event_target:conquering_country
			fire_on_action = {
				on_action = on_primitive_planet_transferred
				scopes = {
					from = event_target:actually_conquered_primitive_country
				}
			}
		}
		every_country = {
			limit = {
				has_communications = event_target:conquering_country
				is_country_type = default
				NOT = { is_same_value = event_target:conquering_country }
			}
			add_opinion_modifier = {
				who = event_target:conquering_country
				modifier = opinion_primitive_violation
			}
		}
		country_event = { id = action.140 }
		reset_years_of_peace = yes
	}
}

# chained from action.14, which is triggered for primitive planets by on_planet_attackers_win
# ROOT = country that just conquered the planet
# event_target:conquered_primitive_country = the planet that was conquered (the default files use this name, including localisation - don't change it)
# event_target:conquered_primitive_species = the species that was conquered (the default files use this name, including localisation - don't change it)
country_event = {
	id = action.140
	title = action.14.name
	desc = { #Non-Purge Policy Regular Empires
		text = action.14.desc
		trigger = {
			NOR = {
				has_ethic = ethic_gestalt_consciousness
				event_target:conquered_primitive_species = {
					has_citizenship_type = { country = ROOT type = citizenship_purge }
				}
			}
		}
	}
	desc = { #Purge Policy Regular Empires
		text = action.14.desc.purge
		trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			event_target:conquered_primitive_species = {
				has_citizenship_type = { country = ROOT type = citizenship_purge }
			}
		}
	}
	desc = { #Servitors
		text = action.14.desc.serv
		trigger = {
			has_civic = civic_machine_servitor
		}
	}
	desc = { #Assimilators
		text = action.14.desc.assim
		trigger = {
			has_civic = civic_machine_assimilator
		}
	}
	desc = { #Exterminators
		text = action.14.desc.term
		trigger = {
			has_civic = civic_machine_terminator
		}
	}
	desc = { #Purge Policy MIs
		text = action.14.desc.mach.purge
		trigger = {
			has_authority = auth_machine_intelligence
			event_target:conquered_primitive_species = {
				has_citizenship_type = { country = ROOT type = citizenship_purge }
			}
			NOR = {
				has_civic = civic_machine_servitor
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_terminator
			}
		}
	}
	desc = { #Enslave Policy MIs
		text = action.14.desc.mach.slave
		trigger = {
			has_authority = auth_machine_intelligence
			event_target:conquered_primitive_species = {
				has_citizenship_type = { country = ROOT type = citizenship_slavery }
			}
			NOR = {
				has_civic = civic_machine_servitor
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_terminator
			}
		}
	}
	desc = { #Purge Policy Hiveminds
		text = action.14.desc.hive.purge
		trigger = {
			has_authority = auth_hive_mind
			event_target:conquered_primitive_species = {
				has_citizenship_type = { country = ROOT type = citizenship_purge }
			}
		}
	}
	desc = { #Enslave Policy Hiveminds
		text = action.14.desc.hive.slave
		trigger = {
			has_authority = auth_hive_mind
			event_target:conquered_primitive_species = {
				has_citizenship_type = { country = ROOT type = citizenship_slavery }
			}
		}
	}
	picture = GFX_evt_ground_combat
	show_sound = event_alien_signal
	location = event_target:conquered_primitive_country
	is_triggered_only = yes
	option = {
		name = action.14.a.phobe
		custom_tooltip = action.14.a.tooltip
		trigger = {
			OR = {
				has_ethic = ethic_fanatic_xenophobe
				has_ethic = ethic_xenophobe
			}
		}
	}
	option = {
		name = action.14.a.military
		custom_tooltip = action.14.a.tooltip
		trigger = {
			OR = {
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_militarist
			}
			NOR = {
				has_ethic = ethic_fanatic_xenophobe
				has_ethic = ethic_xenophobe
			}
		}
	}
	option = {
		name = action.14.a.spirit
		custom_tooltip = action.14.a.tooltip
		trigger = {
			OR = {
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_spiritualist
			}
			NOR = {
				has_ethic = ethic_fanatic_xenophobe
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_militarist
			}
		}
	}
	option = {
		name = action.14.a.material
		custom_tooltip = action.14.a.tooltip
		trigger = {
			OR = {
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_materialist
			}
			NOR = {
				has_ethic = ethic_fanatic_xenophobe
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_militarist
			}
		}
	}
	option = {
		name = action.14.a
		custom_tooltip = action.14.a.tooltip
		trigger = {
			NOR = {
				has_ethic = ethic_fanatic_xenophobe
				has_ethic = ethic_xenophobe
				has_ethic = ethic_fanatic_militarist
				has_ethic = ethic_militarist
				has_ethic = ethic_fanatic_spiritualist
				has_ethic = ethic_spiritualist
				has_ethic = ethic_fanatic_materialist
				has_ethic = ethic_materialist
				has_authority = auth_machine_intelligence
				has_authority = auth_hive_mind
			}
		}
	}
	option = {
		name = action.14.a
		trigger = {
			has_authority = auth_hive_mind
		}
	}
	option = {
		name = action.14.a.serv
		trigger = {
			has_civic = civic_machine_servitor
		}
	}
	option = {
		name = action.14.a.assim
		trigger = {
			has_civic = civic_machine_assimilator
		}
	}
	option = {
		name = action.14.a.term
		trigger = {
			has_civic = civic_machine_terminator
		}
	}
	option = {
		name = action.14.a.mach
		trigger = {
			has_authority = auth_machine_intelligence
			NOR = {
				has_civic = civic_machine_servitor
				has_civic = civic_machine_assimilator
				has_civic = civic_machine_terminator
			}
		}
	}
}

# scheduled to fire 4 times, 5 years apart by game_start.33, which itself is triggered by on_game_start_country
# ROOT = a country with necrophage origin
country_event = {
	id = necroids.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = yes
	}
	immediate = {
		log = "necroids primitive 'conquest': helping the [Root.GetName] 'conquer' all primitives within its borders"
		save_event_target_as = necrophage_country
		# try to have 3 necrophage pops on every planet with planet_culture_shock
		every_owned_planet = {
			limit = {
				has_modifier = planet_culture_shock
				count_owned_pop = {
					count < 3
					limit = { is_same_species = event_target:necrophage_country }
				}
			}
			while = {
				count = 3
				limit = {
					count_owned_pop = {
						count < 3
						limit = { is_same_species = event_target:necrophage_country }
					}
				}
				event_target:necrophage_country = {
					capital_scope = {
						random_owned_pop = {
							limit = {
								is_same_species = event_target:necrophage_country
								can_live_on_planet = PREVPREVPREV
							}
							resettle_pop = {
								pop = THIS
								planet = PREVPREVPREV
							}
							clear_pop_category = yes # in case a specialist/ruler was moved
						}
					}
				}
			}
			check_planet_employment = yes
		}
		# automatically take control of any primitives within borders
		every_planet_within_border = {
			limit = {
				is_colony = yes
				owner = { is_country_type = primitive }
			}
			owner = { save_event_target_as = conquered_primitive_country }
			owner_species = {
				set_timed_species_flag = {
					flag = primitive_species
					years = 10
				}
				save_event_target_as = conquered_primitive_species
			}
			if = {
				limit = { has_observation_outpost = yes }
				observation_outpost = { dismantle = yes }
			}
			fire_on_action = {
				on_action = on_primitive_planet_transferring
				scopes = {
					from = event_target:necrophage_country
				}
			}
			set_owner = event_target:necrophage_country
			add_modifier = {
				modifier = planet_culture_shock
				years = 10
			}
			# move 3 necrophage pops to the newly "conquered" planet
			while = {
				count = 3
				event_target:necrophage_country = {
					capital_scope = {
						random_owned_pop = {
							limit = {
								is_same_species = event_target:necrophage_country
								can_live_on_planet = PREVPREVPREV
							}
							resettle_pop = {
								pop = THIS
								planet = PREVPREVPREV
							}
							clear_pop_category = yes # in case a specialist/ruler was moved
						}
					}
				}
			}
			# replicate some planetary conquest events
			fire_on_action = { # Add conquest districts
				on_action = on_primitive_planet_transferred
				scopes = {
					from = event_target:conquered_primitive_country
				}
			}
			check_planet_employment = yes
			planet_event = { # Crisis Menace Objective: Conquer a Colony
				id = crisis.5010
				scopes = {
					from = event_target:necrophage_country
				}
			}
			planet_event = { id = action.84 } # Imperialists are pleased
		}
	}
}

# Phase IV - Mission Complete
country_event = {
	id = observation.3009
	title = "observation.3009.name"
	desc = "observation.3009.desc"
	picture = GFX_evt_metropolis
	show_sound = event_cityscape ### Celebration sound?
	location = FROM
	is_triggered_only = yes
	immediate = {
		ROOT = { save_event_target_as = infiltrator_civ }
		FROM = {
			owner = {
				save_event_target_as = primitive_civ
				if = {
					limit = {
						is_species_class = REP
						event_target:infiltrator_civ = { is_species_class = HUM }
					}
					event_target:infiltrator_civ = { set_country_flag = reverse_v }
				}
			}
			add_modifier = { modifier = infiltration_happiness days = 7300 }
			random_owned_pop = { save_event_target_as = prim_species } # used by the localisation, don't change

			# using from = ROOT ends up passing the planet,
			# so the event_target is necessary
			fire_on_action = {
				on_action = on_primitive_planet_transferring
				scopes = {
					from = event_target:infiltrator_civ
				}
			}
			observation_outpost = { dismantle = yes }
			set_owner = event_target:infiltrator_civ
			remove_all_armies = yes
			fire_on_action = {
				on_action = on_primitive_planet_transferred
				scopes = {
					from = event_target:primitive_civ
				}
			}
			event_target:primitive_civ = { destroy_country = yes }
		}
	}
	option = {
		name = "observation.3009.a"
	}
}