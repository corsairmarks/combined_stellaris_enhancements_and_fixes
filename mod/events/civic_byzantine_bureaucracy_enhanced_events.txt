namespace = civic_byzantine_bureaucracy_enhanced

# triggered by on_capital_changed
# root = planet (new capital)
# from = planet (former capital, if any)
planet_event = {
	id = civic_byzantine_bureaucracy_enhanced.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = owner
		owner = { has_valid_civic = civic_byzantine_bureaucracy }
	}
	immediate = {
		if = {
			limit = {
				exists = from
				from = {
					is_scope_valid = yes
					is_scope_type = planet
					has_deposit = d_civic_byzantine_bureaucracy_capital
				}
			}
			save_event_target_as = new_capital
			# jobs created by the deposit on the target planet
			set_variable = {
				which = num_magistrate_jobs_from_deposit_target
				value = value:capital_triggered_job_magistrate
			}
			from = {
				# jobs that were created by the deposit on the source planet (minimum 1 for being the country capital)
				set_variable = {
					which = num_magistrate_jobs_from_deposit_source
					value = value:capital_triggered_job_magistrate
				}
				change_variable = {
					which = num_magistrate_jobs_from_deposit_source
					value = 1
				}
				export_trigger_value_to_variable = {
					trigger = num_assigned_jobs
					parameters = { job = magistrate }
					variable = num_magistrate_jobs_source
				}
				every_owned_pop = {
					limit = { has_job = magistrate }
					set_pop_flag = former_magistrate
				}
				set_variable = {
					which = num_planet_pops_source
					value = trigger:num_pops
				}
				log = "Country capital for [Root.Owner.GetRealName] moved - relocating capital-based magistrates"
				log = "Previous capital planet [This.GetName] (sector [This.Sector.GetName]): [This.num_magistrate_jobs_source] magistrates ([This.num_magistrate_jobs_from_deposit_source] from deposit), [This.num_planet_pops_source] total Pops"
				log = "New capital planet [new_capital.GetName] (sector [new_capital.Sector.GetName]): [new_capital.num_magistrate_jobs_from_deposit_target] from deposit"
				# if the capital was moved to planet is a different sector, the source planet may still be a sector capital
				if = {
					limit = { is_sector_capital = no }
					remove_deposit = d_civic_byzantine_bureaucracy_capital
				}
				while = {
					count = num_magistrate_jobs_from_deposit_source # deposit jobs source, maximum amount that can be transferred
					limit = {
						# minimum of: Pops - 1, worked source jobs, source jobs from deposit, target jobs from deposit
						check_variable = {
							which = num_planet_pops_source
							value > 1
						}
						check_variable = {
							which = num_magistrate_jobs_source
							value > 0
						}
						event_target:new_capital = {
							check_variable = {
								which = num_magistrate_jobs_from_deposit_target
								value > 0
							}
						}
					}
					random_owned_pop = {
						limit = { has_pop_flag = former_magistrate }
						unemploy_pop = yes
						clear_pop_category = yes
						remove_pop_flag = former_magistrate
						log = "[This.GetName] being resettled to new country capital [new_capital.GetName]"
						resettle_pop = {
							pop = this
							planet = event_target:new_capital
						}
					}
					change_variable = {
						which = num_planet_pops_source
						value = -1
					}
					change_variable = {
						which = num_magistrate_jobs_source
						value = -1
					}
					event_target:new_capital = {
						change_variable = {
							which = num_magistrate_jobs_from_deposit_target
							value = -1
						}
					}
				}
				# cleanup for magistrate Pops that didn't resettle
				every_owned_pop = {
					limit = { has_pop_flag = former_magistrate }
					remove_pop_flag = former_magistrate
				}
				clear_variable = num_magistrate_jobs_from_deposit_source
				clear_variable = num_magistrate_jobs_source
				clear_variable = num_planet_pops_source
			}

			clear_variable = num_magistrate_jobs_from_deposit_target
		}

		add_deposit = d_civic_byzantine_bureaucracy_capital
		check_planet_employment = yes
	}
}

# triggered by on_monthly_pulse_country and on_post_government_changed
# root = country
country_event = {
	id = civic_byzantine_bureaucracy_enhanced.2
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_valid_civic = civic_byzantine_bureaucracy
	}
	immediate = {
		every_owned_sector = {
			random_owned_planet = {
				limit = {
					is_sector_capital = yes
					NOT = { has_deposit = d_civic_byzantine_bureaucracy_capital }
				}
				save_event_target_as = new_capital
				# jobs created by the deposit on the target planet
				set_variable = {
					which = num_magistrate_jobs_from_deposit_target
					value = value:capital_triggered_job_magistrate
				}
				prev = {
					# note there may not be a previous capital (e.g. new sector)
					random_owned_planet = {
						limit = {
							NOT = { is_planet = event_target:new_capital }
							has_deposit = d_civic_byzantine_bureaucracy_capital
						}
						# jobs that were created by the deposit on the source planet
						set_variable = {
							which = num_magistrate_jobs_from_deposit_source
							value = value:capital_triggered_job_magistrate
						}
						export_trigger_value_to_variable = {
							trigger = num_assigned_jobs
							parameters = { job = magistrate }
							variable = num_magistrate_jobs_source
						}
						every_owned_pop = {
							limit = { has_job = magistrate }
							set_pop_flag = former_magistrate
						}
						set_variable = {
							which = num_planet_pops_source
							value = trigger:num_pops
						}
						log = "Sector [Prev.GetName] capital for [Root.Owner.GetRealName] moved - relocating capital-based magistrates"
						log = "Previous capital planet [This.GetName]: [This.num_magistrate_jobs_source] magistrates ([This.num_magistrate_jobs_from_deposit_source] from deposit), [This.num_planet_pops_source] total Pops"
						log = "New capital planet [new_capital.GetName]: [new_capital.num_magistrate_jobs_from_deposit_target] from deposit"
						remove_deposit = d_civic_byzantine_bureaucracy_capital
						while = {
							count = num_magistrate_jobs_from_deposit_source # maximum amount that can be transferred
							limit = {
								# minimum of: Pops - 1, worked source jobs, source jobs from deposit, target jobs from deposit
								check_variable = {
									which = num_planet_pops_source
									value > 1
								}
								check_variable = {
									which = num_magistrate_jobs_source
									value > 0
								}
								event_target:new_capital = {
									check_variable = {
										which = num_magistrate_jobs_from_deposit_target
										value > 0
									}
								}
							}
							random_owned_pop = {
								limit = { has_pop_flag = former_magistrate }
								unemploy_pop = yes
								clear_pop_category = yes
								remove_pop_flag = former_magistrate
								log = "[This.GetName] being resettled to new sector capital [new_capital.GetName]"
								resettle_pop = {
									pop = this
									planet = event_target:new_capital
								}
							}
							change_variable = {
								which = num_planet_pops_source
								value = -1
							}
							change_variable = {
								which = num_magistrate_jobs_source
								value = -1
							}
							event_target:new_capital = {
								change_variable = {
									which = num_magistrate_jobs_from_deposit_target
									value = -1
								}
							}
						}
						# cleanup for magistrate Pops that didn't resettle
						every_owned_pop = {
							limit = { has_pop_flag = former_magistrate }
							remove_pop_flag = former_magistrate
						}
						clear_variable = num_magistrate_jobs_from_deposit_source
						clear_variable = num_magistrate_jobs_source
						clear_variable = num_planet_pops_source
					}
				}

				clear_variable = num_magistrate_jobs_from_deposit_target
				add_deposit = d_civic_byzantine_bureaucracy_capital
				check_planet_employment = yes
			}
			# cleanup any leftover deposits - for example, a new sector encompasses the previous capitals of two sectors
			every_owned_planet = {
				limit = {
					is_sector_capital = no
					has_deposit = d_civic_byzantine_bureaucracy_capital
				}
				remove_deposit = d_civic_byzantine_bureaucracy_capital
			}
		}
	}
}

# triggered by on_planet_transfer and each planet from on_post_government_changed
# root = planet
# from = country (new owner)
# fromfrom = country (former owner, if any) - only from on_planet_transfer
planet_event = {
	id = civic_byzantine_bureaucracy_enhanced.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_deposit = d_civic_byzantine_bureaucracy_capital
		NAND = {
			exists = from
			from = { has_valid_civic = civic_byzantine_bureaucracy }
		}
	}
	immediate = {
		# calculate the jobs created by the deposit
		set_variable = {
			which = num_magistrate_jobs_from_deposit
			value = value:capital_triggered_job_magistrate
		}
		# count actually-worked magistrate jobs
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = { job = magistrate }
			variable = num_magistrate_jobs
		}
		every_owned_pop = {
			limit = { has_job = magistrate }
			set_pop_flag = former_magistrate
		}
		remove_deposit = d_civic_byzantine_bureaucracy_capital
		while = {
			count = num_magistrate_jobs_from_deposit
			limit = {
				# minimum of: worked magistrate jobs or magistrate jobs from deposit
				check_variable = {
					which = num_magistrate_jobs
					value > 0
				}
				check_variable = {
					which = num_magistrate_jobs_from_deposit
					value > 0
				}
			}
			random_owned_pop = {
				limit = { has_pop_flag = former_magistrate }
				unemploy_pop = yes
				clear_pop_category = yes
				remove_pop_flag = former_magistrate
			}
			change_variable = {
				which = num_magistrate_jobs
				value = -1
			}
			change_variable = {
				which = num_magistrate_jobs_from_deposit
				value = -1
			}
		}
		clear_variable = num_magistrate_jobs_from_deposit
		clear_variable = num_magistrate_jobs
	}
}

# triggered by on_colony_destroyed
# root = planet
planet_event = {
	id = civic_byzantine_bureaucracy_enhanced.4
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_deposit = d_civic_byzantine_bureaucracy_capital
	}
	immediate = {
		remove_deposit = d_civic_byzantine_bureaucracy_capital
	}
}

# triggered by on_post_government_changed
# root = country
country_event = {
	id = civic_byzantine_bureaucracy_enhanced.5
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_valid_civic = civic_byzantine_bureaucracy }
	}
	immediate = {
		every_owned_planet = {
			limit = { has_deposit = d_civic_byzantine_bureaucracy_capital }
			planet_event = {
				id = civic_byzantine_bureaucracy_enhanced.3
			}
		}
	}
}

# triggered by empire_init_capital_planet
# root = planet, capital
planet_event = {
	id = civic_byzantine_bureaucracy_enhanced.6
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = owner
		owner = { has_valid_civic = civic_byzantine_bureaucracy }
	}
	immediate = {
		add_deposit = d_civic_byzantine_bureaucracy_capital
	}
}