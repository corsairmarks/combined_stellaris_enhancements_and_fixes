namespace = keep_leaders

# flag mod as active
event = {
	id = keep_leaders.13
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = keep_leaders_installed }
	}
	immediate = {
		set_global_flag = keep_leaders_installed
	}
}

# triggered by on_subject_integrated
# THIS = country, overlord
# FROM = country, integrated subject
country_event = {
	id = keep_leaders.1
	picture = GFX_evt_intelligence_report
	show_sound = event_vote
	title = keep_leaders.1.title
	desc = {
		trigger = {
			has_country_flag = keeping_leaders_conquest@FROM
		}
		text = keep_leaders.1.desc.conquest
	}
	desc = {
		trigger = {
			NOT = { has_country_flag = keeping_leaders_conquest@FROM }
		}
		text = keep_leaders.1.desc.integration
	}
	is_triggered_only = yes
	trigger = {
		exists = FROM
		FROM = {
			OR = {
				exists = ruler
				exists = heir
				any_owned_leader = { is_eligible_transfer_leader_class = yes }
			}
		}
	}
	immediate = {
		log = "country [From.GetRealName] integrated by [Root.GetRealName]"
		if = {
			limit = { NOT = { has_country_flag = keeping_leaders_conquest@FROM } }
			set_country_flag = keeping_leaders_integration@FROM
		}
		# variables for the counts from accumulate_leader
		set_variable = {
			which = leader_accumulator
			value = 0
		}
		set_variable = {
			which = leader_organic_accumulator
			value = 0
		}
		set_variable = {
			which = leader_organic_non_cyborg_accumulator
			value = 0
		}
		set_variable = {
			which = leader_hive_accumulator
			value = 0
		}
		set_variable = {
			which = leader_robotic_accumulator
			value = 0
		}
		set_variable = {
			which = leader_necrophagable_accumulator
			value = 0
		}
		set_variable = {
			which = leader_same_species_accumulator
			value = 0
		}
		set_variable = {
			which = leader_not_same_species_accumulator
			value = 0
		}
		set_variable = {
			which = leader_transferable_accumulator
			value = 0
		}
		set_variable = {
			which = leader_transferable_or_assimilatable_accumulator
			value = 0
		}
		# "argument" for transfer_leader_to_storage
		event_target:global_event_country = { save_event_target_as = storage_owner }
		# "arguments" for accumulate_leader
		save_event_target_as = variable_storage
		save_event_target_as = potential_owner
		# count the leaders so we know the multiplier for adding resources
		# like unity or society research for empires that qualify
		FROM = {
			# "argument" for localistation and set_leader_storage_flags
			save_event_target_as = former_owner
			capital_scope = {
				save_event_target_as = conquered_planet
			}
			every_owned_leader = {
				limit = { is_eligible_transfer_leader_class = yes }
				accumulate_leader = yes
				transfer_leader_to_storage = yes
			}
			if = {
				limit = { exists = heir }
				heir = {
					accumulate_leader = yes
					set_name = keep_leaders.former_ruler_name
					set_leader_flag = clear_traits
					save_event_target_as = leader_to_replace
				}
				replace_leader_based_on_pre_ruler_leader_class = yes
				event_target:leader_to_replace = {
					set_leader_flag = former_heir
					set_former_gestalt_ruler_flag = yes
					add_former_heir_trait = yes
					transfer_leader_to_storage = yes
				}
			}
			if = {
				limit = { exists = ruler }
				ruler = {
					accumulate_leader = yes
					set_name = keep_leaders.former_ruler_name
					set_leader_flag = clear_traits
					save_event_target_as = leader_to_replace
				}
				replace_leader_based_on_pre_ruler_leader_class = yes
				event_target:leader_to_replace = {
					set_leader_flag = former_ruler
					set_former_gestalt_ruler_flag = yes
					add_former_ruler_trait = yes
					transfer_leader_to_storage = yes
				}
			}
		}
	}
	# keep none
	option = {
		name = {
			text = keep_leaders.1.a
			trigger = {
				is_homicidal = no
			}
		}
		name = {
			text = keep_leaders.1.a.pur
			trigger = {
				has_valid_civic = civic_fanatic_purifiers
			}
		}
		name = {
			text = keep_leaders.1.a.swarm
			trigger = {
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		name = {
			text = keep_leaders.1.a.term
			trigger = {
				has_valid_civic = civic_machine_terminator
			}
		}
		if = {
			limit = { NOT = { has_valid_civic = civic_hive_devouring_swarm } }
			custom_tooltip = keep_leaders.1.a.tooltip
		}
		if = {
			limit = { has_valid_civic = civic_fanatic_purifiers }
			add_resource = {
				unity = 5
				mult = leader_not_same_species_accumulator
			}
		}
		else_if = {
			limit = { has_valid_civic = civic_hive_devouring_swarm }
			custom_tooltip = keep_leaders.1.a.swarm.tooltip
			add_resource = {
				society_research = 5
				mult = leader_organic_accumulator
			}
		}
		else_if ={
			limit = { has_valid_civic = civic_machine_terminator }
			add_resource = {
				unity = 5
				mult = leader_organic_accumulator
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.serv.fail_text
				NOT = { has_valid_civic = civic_machine_servitor }
			}
			custom_tooltip = {
				fail_text = empire_is_xenophile_no_x
				is_xenophile = no
			}
			custom_tooltip = {
				fail_text = empire_is_pacifist_no_x
				is_pacifist = no
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_xenophobe = yes
			}
			modifier = {
				factor = 0.5
				is_necrophage_empire = yes
			}
			modifier = {
				factor = 3
				has_valid_civic = civic_fanatic_purifiers
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						NOT = { is_same_species = event_target:potential_owner }
					}
				}
			}
			modifier = {
				factor = 5
				has_valid_civic = civic_machine_terminator
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_robotic_species = yes
					}
				}
			}
			modifier = {
				factor = 20
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip.none
			description_parameters = {
				TOTAL = "[This.leader_accumulator]"
			}
		}
		# do nothing
	}
	# keep none (nice)
	option = {
		name = {
			text = keep_leaders.1.b
			trigger = {
				is_regular_empire = yes
			}
		}
		name = {
			text = keep_leaders.1.b.serv
			trigger = {
				has_valid_civic = civic_machine_servitor
			}
		}
		name = {
			text = keep_leaders.1.b.gest.exclusive
			trigger = {
				OR = {
					is_regular_hive_empire = yes
					AND = {
						is_machine_empire = yes
						NOT = { has_valid_civic = civic_machine_servitor }
					}
				}
			}
		}
		if = {
			limit = { has_valid_civic = civic_machine_servitor }
			custom_tooltip = keep_leaders.1.b.serv.tooltip
		}
		else_if = {
			limit = { is_gestalt = yes }
			custom_tooltip = keep_leaders.1.b.gest.exclusive.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.b.tooltip
		}
		trigger = {
			is_devouring_hive_empire = no
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.pur.fail_text
				if = {
					limit = { has_valid_civic = civic_fanatic_purifiers }
					event_target:global_event_country = { all_stored_leaders_same_species = yes }
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.term.fail_text
				if = {
					limit = { has_valid_civic = civic_machine_terminator }
					event_target:global_event_country = { all_stored_leaders_robotic_lenient = yes }
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.mach.fail_text
				if = {
					limit = {
						is_machine_empire = yes
						NOT = { has_valid_civic = civic_machine_servitor }
					}
					event_target:global_event_country = { all_stored_leaders_robotic_lenient = yes }
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.b.hive.fail_text
				if = {
					limit = { is_regular_hive_empire = yes }
					event_target:global_event_country = { all_stored_leaders_hive = yes }
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				has_valid_civic = civic_machine_servitor
			}
			modifier = {
				factor = 2
				is_necrophage_empire = yes
			}
			modifier = {
				factor = 100
				has_valid_civic = civic_inwards_perfection
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip.none
			description_parameters = {
				TOTAL = "[This.leader_accumulator]"
			}
		}
		# do nothing
	}
	# keep mechanical only - non-assimilation
	option = {
		name = {
			text = keep_leaders.1.c
			trigger = {
				is_regular_empire = yes
				NOR = {
					has_country_flag = flesh_weakened
					has_country_flag = synthetic_empire
				}
			}
		}
		name = {
			text = keep_leaders.1.c.term
			trigger = { has_valid_civic = civic_machine_terminator }
		}
		name = {
			text = keep_leaders.1.c.mach
			trigger = {
				OR = {
					has_country_flag = flesh_weakened
					has_country_flag = synthetic_empire
					AND = {
						is_machine_empire = yes
						NOR = {
							has_valid_civic = civic_machine_servitor
							has_valid_civic = civic_machine_terminator
						}
					}
				}
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_robotic_species_lenient = no
					}
				}
			}
		}
		name = {
			text = keep_leaders.1.c.mach.exclusive
			trigger = {
				event_target:global_event_country = { all_stored_leaders_robotic_lenient = yes }
			}
		}
		if = {
			limit = {
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_organic_species = yes
					}
				}
			}
			if = {
				limit = { event_target:potential_owner = { empire_considers_cyborgs_robotic = yes } }
				if = {
					limit = {
						event_target:global_event_country = {
							any_owned_leader = {
								is_eligible_transfer_leader_from_storage = yes
								is_organic_species = yes
								is_cyborg_species = no
							}
						}
					}
					custom_tooltip = keep_leaders.1.c.cyb.tooltip
				}
				else = {
					custom_tooltip = keep_leaders.1.c.cyb.exclusive.tooltip
				}
			}
			else_if = {
				limit = { has_valid_civic = civic_machine_terminator }
				custom_tooltip = keep_leaders.1.c.term.tooltip
			}
			else_if = {
				limit = { is_synthetic_empire = yes }
				custom_tooltip = keep_leaders.1.c.mach.tooltip
			}
			else = {
				custom_tooltip = keep_leaders.1.c.tooltip
			}
		}
		else = {
			custom_tooltip = keep_leaders.1.c.mach.exclusive.tooltip
		}
		trigger = {
			is_hive_empire = no
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_organic_species = yes
					is_hive_species = no
				}
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_robotic_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.serv.fail_text
				NOT = { has_valid_civic = civic_machine_servitor }
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = { is_necrophage_empire = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_necrophage = yes }
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.phobe.fail_text
				if = {
					limit = { is_xenophobe = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_xenophobe = yes }
				}
			}
			custom_tooltip = {
				fail_text = ROBOTS_ARE_OUTLAWED_NO_X
				has_full_ai_rights = yes
			}
			custom_tooltip = {
				fail_text = empire_is_xenophile_no_x
				is_xenophile = no
			}
			custom_tooltip = {
				fail_text = empire_is_pacifist_no_x
				is_pacifist = no
			}
		}
		if = {
			limit = { has_valid_civic = civic_machine_terminator }
			add_resource = {
				unity = 5
				mult = leader_organic_accumulator
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 10
				is_machine_empire = yes
				NOT = { has_valid_civic = civic_machine_assimilator }
			}
			modifier = {
				factor = 0
				is_spiritualist = yes
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_robotic_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.10
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# keep mechanical only (nice) - non-assimilation
	option = {
		name = {
			text = keep_leaders.1.d
			trigger = {
				NOT = { has_valid_civic = civic_machine_servitor }
			}
		}
		name = {
			text = keep_leaders.1.d.serv
			trigger = {
				has_valid_civic = civic_machine_servitor
			}
		}
		if = {
			limit = { has_valid_civic = civic_machine_servitor }
			custom_tooltip = keep_leaders.1.d.serv.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.d.tooltip
		}
		trigger = {
			is_hive_empire = no
			event_target:global_event_country = {
				OR = {
					event_target:potential_owner = { is_machine_empire = yes }
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_organic_species = yes
						is_hive_species = no
					}
				}
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_robotic_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.term.fail_text
				if = {
					limit  = { has_valid_civic = civic_machine_terminator }
					always = no
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.mach.fail_text
				if = {
					limit  = {
						is_machine_empire = yes
						NOT = { has_valid_civic = civic_machine_terminator }
					}
					has_valid_civic = civic_machine_servitor
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = { is_necrophage_empire = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_necrophage = yes }
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.phobe.fail_text
				if = {
					limit = { is_xenophobe = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_xenophobe = yes }
				}
			}
			custom_tooltip = {
				fail_text = ROBOTS_ARE_OUTLAWED_NO_X
				has_full_ai_rights = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_materialist = yes
			}
			modifier = {
				factor = 0
				is_spiritualist = yes
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_robotic_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.10
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# keep organic only - non-assimilation
	option = {
		name = {
			text = keep_leaders.1.e
			trigger = {
				is_spiritualist = no
				has_full_ai_rights = no
			}
		}
		name = {
			text = keep_leaders.1.e.spir
			trigger = {
				is_spiritualist = yes
				has_full_ai_rights = no
			}
		}
		name = {
			text = keep_leaders.1.e.ai
			trigger = {
				has_full_ai_rights = yes
			}
		}
		custom_tooltip = keep_leaders.1.e.tooltip
		trigger = {
			is_regular_empire = yes
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_organic_species = yes
					is_hive_species = no
				}
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_robotic_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.pur.fail_text
				NOT = { has_valid_civic = civic_fanatic_purifiers }
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = { is_necrophage_empire = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_necrophage = yes }
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe_no_x
				if = {
					limit = { is_xenophobe = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_xenophobe = yes }
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_spiritualist = yes
			}
			modifier = {
				factor = 0
				is_materialist = yes
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_organic_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.11
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# same species only
	option = {
		name = {
			text = keep_leaders.1.g
			trigger = {
				NOT = { has_valid_civic = civic_fanatic_purifiers }
			}
		}
		name = {
			text = keep_leaders.1.g.pur
			trigger = {
				has_valid_civic = civic_fanatic_purifiers
			}
		}
		if = {
			limit = { has_valid_civic = civic_fanatic_purifiers }
			custom_tooltip = keep_leaders.1.g.pur.tooltip
			add_resource = {
				unity = 5
				mult = leader_not_same_species_accumulator
			}
		}
		else = {
			custom_tooltip = keep_leaders.1.g.tooltip
		}
		trigger = {
			is_regular_empire = yes
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_same_species = event_target:potential_owner
				}
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					NOT = { is_same_species = event_target:potential_owner }
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = empire_is_xenophile_no_x
				is_xenophile = no
			}
			custom_tooltip = {
				fail_text = empire_is_pacifist_no_x
				is_pacifist = no
			}
		}
		if = {
			limit = { has_valid_civic = civic_fanatic_purifiers }
			if = {
				limit = { has_valid_civic = civic_fanatic_purifiers }
				add_resource = {
					unity = 5
					mult = leader_not_same_species_accumulator
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_xenophobe = yes
			}
			modifier = {
				factor = 2
				has_valid_civic = civic_fanatic_purifiers
			}
			modifier = {
				factor = 0.5
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_same_species_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.12
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# same species only (nice)
	option = {
		name = keep_leaders.1.h
		custom_tooltip = keep_leaders.1.h.tooltip
		trigger = {
			is_regular_empire = yes
			NOT = { has_valid_civic = civic_fanatic_purifiers }
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_same_species = event_target:potential_owner
				}
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					NOT = { is_same_species = event_target:potential_owner }
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = empire_is_xenophile_no_x
				is_xenophile = no
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 0.5
				is_xenophobe = yes
			}
			modifier = {
				factor = 4
				is_necrophage_empire = yes
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_same_species_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.12
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# hive keep hive only
	option = {
		name = {
			text = keep_leaders.1.i.hive
			trigger = {
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_hive_species = no
					}
				}
			}
		}
		name = {
			text = keep_leaders.1.i.hive.exclusive
			trigger = {
				event_target:global_event_country = { all_stored_leaders_hive = yes }
			}
		}
		if = {
			limit = {
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_hive_species = no
					}
				}
			}
			custom_tooltip = keep_leaders.1.i.hive.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.i.hive.exclusive.tooltip
		}
		trigger = {
			is_hive_empire = yes
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_hive_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.swarm.fail_text
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		ai_chance = {
			factor = 5
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_hive_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.14
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# try to keep as many as possible
	option = {
		name = {
			text = keep_leaders.1.j
			trigger = {
				NOT = { has_valid_civic = civic_fanatic_purifiers }
			}
		}
		name = {
			text = keep_leaders.1.j.pur
			trigger = {
				has_valid_civic = civic_fanatic_purifiers
			}
		}
		if = {
			limit = { NOT = { has_valid_civic = civic_fanatic_purifiers } }
			custom_tooltip = keep_leaders.1.j.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.j.pur.tooltip
		}
		trigger = {
			is_regular_empire = yes
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = { is_necrophage_empire = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_necrophage = yes }
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe_no_x
				if = {
					limit = { is_xenophobe = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_xenophobe = yes }
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.pur.fail_text
				if = {
					limit = { has_valid_civic = civic_fanatic_purifiers }
					event_target:global_event_country = { all_stored_leaders_same_species = yes }
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.j.fail_text
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_eligible_transfer_without_assimilation = yes
					}
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_pacifist = yes
			}
			modifier = {
				factor = 2
				is_xenophile = yes
			}
			modifier = {
				factor = 2
				has_full_ai_rights = yes
				event_target:global_event_country = {
					any_owned_leader = {
						is_eligible_transfer_leader_from_storage = yes
						is_robotic_species = yes
					}
				}
			}
			modifier = {
				factor = 0
				has_valid_civic = civic_inwards_perfection
			}
			modifier = {
				factor = 20
				has_valid_civic = civic_fanatic_purifiers
				event_target:global_event_country = { all_stored_leaders_same_species = yes }
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_transferable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.15
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# assimilate: hive
	option = {
		name = keep_leaders.1.k.hive
		custom_tooltip = keep_leaders.1.k.hive.tooltip
		trigger = {
			hidden_trigger = {
				has_utopia = yes
			}
			is_hive_empire = yes
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_eligible_for_hive_assimilation_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.bio.fail_text
				has_ascension_perk = ap_evolutionary_mastery
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.swarm.fail_text
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		ai_chance = {
			factor = 10
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_transferable_or_assimilatable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.16
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# assimilate: unhive
	option = {
		name = keep_leaders.1.k.unhive
		custom_tooltip = keep_leaders.1.k.unhive.tooltip
		trigger = {
			hidden_trigger = {
				has_utopia = yes
			}
			is_hive_empire = no
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_eligible_for_unhive_assimilation_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.bio.fail_text
				has_ascension_perk = ap_evolutionary_mastery
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = { is_necrophage_empire = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_necrophage = yes }
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe_no_x
				if = {
					limit = { is_xenophobe = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_xenophobe = yes }
				}
			}
		}
		ai_chance = {
			factor = 10
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_transferable_or_assimilatable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.16
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# assimilate: psionic
	option = {
		name = keep_leaders.1.k.psi
		custom_tooltip = keep_leaders.1.k.psi.tooltip
		trigger = {
			hidden_trigger = {
				has_utopia = yes
			}
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_eligible_for_psionic_assimilation_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.psionic.fail_text
				has_ascension_perk = ap_transcendence
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = { is_necrophage_empire = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_necrophage = yes }
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe_no_x
				if = {
					limit = { is_xenophobe = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_xenophobe = yes }
				}
			}
		}
		ai_chance = {
			factor = 10
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_transferable_or_assimilatable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.16
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# assimilate: cybernetic
	option = {
		name = keep_leaders.1.k.cyb
		custom_tooltip = keep_leaders.1.k.cyb.tooltip
		trigger = {
			hidden_trigger = {
				has_utopia = yes
				NOT = { has_country_flag = synthetic_empire }
			}
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_eligible_for_cybernetic_assimilation_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.cyb1.fail_text
				has_ascension_perk = ap_the_flesh_is_weak
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.k.cyb2.fail_text
				has_country_flag = flesh_weakened
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = { is_necrophage_empire = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_necrophage = yes }
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe_no_x
				if = {
					limit = { is_xenophobe = yes }
					event_target:global_event_country = { all_stored_leaders_eligible_transfer_to_xenophobe = yes }
				}
			}
		}
		ai_chance = {
			factor = 10
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_transferable_or_assimilatable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.16
				scopes = { from = event_target:global_event_country }
			}	
		}
	}
	# assimilate: synthetic
	option = {
		name = keep_leaders.1.k.synth
		custom_tooltip = keep_leaders.1.k.synth.tooltip
		trigger = {
			hidden_trigger = {
				has_utopia = yes
				has_ascension_perk = ap_the_flesh_is_weak
				has_country_flag = flesh_weakened
			}
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_eligible_for_synthetic_assimilation_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.synth1.fail_text
				has_ascension_perk = ap_synthetic_evolution
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.k.synth2.fail_text
				has_country_flag = synthetic_empire
			}
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 0.5
				is_xenophile = yes
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_transferable_or_assimilatable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.16
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# assimilate: assimilator
	option = {
		name = keep_leaders.1.k.assim
		custom_tooltip = keep_leaders.1.k.assim.tooltip
		trigger = {
			hidden_trigger = {
				has_synthethic_dawn = yes
			}
			is_machine_empire = yes
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_eligible_for_machine_assimilation_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.mach.fail_text
				has_valid_civic = civic_machine_assimilator
			}
		}
		ai_chance = {
			factor = 20
		}
		add_resource= {
			unity = 5
			society_research = 5
			mult = leader_organic_non_cyborg_accumulator
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_transferable_or_assimilatable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.16
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# assimilate: unmachine
	option = {
		name = keep_leaders.1.k.unmach
		custom_tooltip = keep_leaders.1.k.unmach.tooltip
		trigger = {
			hidden_trigger = {
				has_synthethic_dawn = yes
				has_utopia = yes
				has_global_flag = deassimilate_machines_installed
			}
			is_regular_empire = yes
			event_target:global_event_country = {
				any_owned_leader = {
					is_eligible_transfer_leader_from_storage = yes
					is_machine_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = disconnected_machine_leaders_collapse_without_ai_assimilation_no_x
				has_technology = tech_sapient_ai
			}
			custom_tooltip = {
				fail_text = ROBOTS_ARE_OUTLAWED_NO_X
				has_policy_flag = robots_allowed
			}
			custom_tooltip = {
				fail_text = AI_IS_OUTLAWED_LEADER_NO_X
				NOT = { has_policy_flag = ai_outlawed }
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_robotic_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.16
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	# necrophage (kinda like assimilation in terms of the outcome)
	option = {
		name = keep_leaders.1.k.necro
		custom_tooltip = keep_leaders.1.k.necro.tooltip
		trigger = {
			hidden_trigger = {
				has_necroids = yes
			}
			is_necrophage_empire = yes
		}
		allow = {
			custom_tooltip = {
				fail_text = CANNOT_NECROPHAGE_MACHINES_NO_X
				event_target:global_event_country = {
					NOT = {
						any_owned_leader = {
							is_eligible_transfer_leader_from_storage = yes
							is_organic_species = yes
						}
					}
				}
			}
		}
		# necrophage unity
		if = {
			limit = { has_swapped_tradition = tr_harmony_unity_of_self }
			add_resource = {
				unity = 5
				mult = leader_necrophagable_accumulator
			}
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 2
				has_policy_flag = purge_allowed
			}
		}
		custom_tooltip_with_params = {
			description = keep_leaders.1.tooltip
			description_parameters = {
				VALUE = "[This.leader_necrophagable_accumulator]"
				TOTAL = "[This.leader_accumulator]"
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.17
				scopes = { from = event_target:global_event_country }
			}
		}
	}
	after = {
		hidden_effect = {
			# clean up variables used in this event
			if = {
				limit = { is_variable_set = leader_accumulator }
				clear_variable = leader_accumulator
			}
			if = {
				limit = { is_variable_set = leader_organic_accumulator }
				clear_variable = leader_organic_accumulator
			}
			if = {
				limit = { is_variable_set = leader_organic_non_cyborg_accumulator }
				clear_variable = leader_organic_non_cyborg_accumulator
			}
			if = {
				limit = { is_variable_set = leader_hive_accumulator }
				clear_variable = leader_hive_accumulator
			}
			if = {
				limit = { is_variable_set = leader_robotic_accumulator }
				clear_variable = leader_robotic_accumulator
			}
			if = {
				limit = { is_variable_set = leader_necrophagable_accumulator }
				clear_variable = leader_necrophagable_accumulator
			}
			if = {
				limit = { is_variable_set = leader_same_species_accumulator }
				clear_variable = leader_same_species_accumulator
			}
			if = {
				limit = { is_variable_set = leader_not_same_species_accumulator }
				clear_variable = leader_not_same_species_accumulator
			}
			if = {
				limit = { is_variable_set = leader_transferable_accumulator }
				clear_variable = leader_transferable_accumulator
			}
			if = {
				limit = { is_variable_set = leader_transferable_or_assimilatable_accumulator }
				clear_variable = leader_transferable_or_assimilatable_accumulator
			}
			# kill the leftovers
			event_target:global_event_country = {
				every_owned_leader = {
					limit = {
						has_leader_flag = former_owner@event_target:former_owner
						has_leader_flag = potential_owner@event_target:potential_owner
					}
					kill_leader = { show_notification = no }
				}
			}
			country_event = {
				id = keep_leaders_bonus_traits.20
			}
		}
	}
}

# triggered by on_country_destroyed
# THIS = destroyed country
# FROM = optional, destroyer (country)
country_event = {
	id = keep_leaders.2
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_country_type = primitive
		exists = FROM
		FROM = {
			is_country_type = default
			NOR = {
				has_active_event = { observation.3009 }
				has_country_flag = keeping_leaders_integration@ROOT
				has_country_flag = keeping_leaders_infiltration@ROOT
			}
		}
	}
	immediate = {
		log = "primitive country [Root.GetRealName] destroyed by [From.GetRealName]"
		# fires the above event - hooray for reuse!
		FROM = {
			set_country_flag = keeping_leaders_conquest@ROOT
			country_event = {
				id = keep_leaders.1
				scopes = {
					from = ROOT
				}
			}
		}
	}
}

# window with options to potentially keep the stored leaders
# triggered by on_primitive_planet_transferred
# ROOT = planet (after ownership change)
# FROM = country, infiltrated primitives
planet_event = {
	id = keep_leaders.3
	title = keep_leaders.3.title
	desc = keep_leaders.3.desc
	picture = GFX_evt_diplomatic_visit
	is_triggered_only = yes
	trigger = {
		exists = owner
		owner = { has_country_flag = keeping_leaders_infiltration@FROM }
		exists = FROM
		event_target:global_event_country = {
			any_owned_leader = {
				has_leader_flag = former_owner@FROM
				has_leader_flag = potential_owner@PREVPREV.owner
			}
		}
	}
	immediate = {
		owner = { save_event_target_as = potential_owner }
		FROM = {
			save_event_target_as = former_owner
			owner_species = { save_event_target_as = original_species }
		}
	}
	option = {
		name = keep_leaders.3.a
		custom_tooltip_with_params = {
			description = keep_leaders.3.a.tooltip
			description_parameters = {
				VALUE = "[This.infiltration_leader_accumulator]"
			}
		}
		hidden_effect = {
			event_target:global_event_country = {
				every_owned_leader = {
					limit = { is_eligible_transfer_leader_from_storage = yes }
					set_owner = event_target:potential_owner
					change_species = event_target:potential_owner
					change_leader_portrait = event_target:potential_owner
					fire_on_action = { on_action = on_leader_species_changed }
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				owner = { is_xenophobe = yes }
			}
			modifier = {
				factor = 2
				owner = {
					has_valid_ai_personality = yes
					OR = {
						has_ai_personality_behaviour = displacer
						has_ai_personality_behaviour = slaver
					}
				}
			}
		}
	}
	option = {
		name = keep_leaders.3.b
		custom_tooltip_with_params = {
			description = keep_leaders.3.b.tooltip
			description_parameters = {
				VALUE = "[This.infiltration_leader_accumulator]"
			}
		}
		hidden_effect = {
			event_target:global_event_country = {
				every_owned_leader = {
					limit = { is_eligible_transfer_leader_from_storage = yes }
					set_owner = event_target:potential_owner
					change_species = event_target:potential_owner
					fire_on_action = { on_action = on_leader_species_changed }
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				owner = { is_authoritarian = yes }
			}
			modifier = {
				factor = 2
				owner = {
					has_valid_ai_personality = yes
					has_ai_personality_behaviour = infiltrator
				}
			}
		}
	}
	option = {
		name = keep_leaders.3.c
		owner = {
			add_modifier = {
				modifier = kl_peerless_infiltration_agents
				years = 20
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				owner = {
					has_valid_ai_personality = yes
					OR = {
						has_ai_personality_behaviour = multispecies
						has_ai_personality = hegemonic_imperialists
					}
				}
			}
			modifier = {
				factor = 0
				owner = {
					has_valid_ai_personality = yes
					has_ai_personality = honorbound_warriors
				}
			}
		}
	}
	after = {
		hidden_effect = {
			if = {
				limit = { is_variable_set = infiltration_leader_accumulator }
				clear_variable = infiltration_leader_accumulator
			}
			event_target:global_event_country = {
				every_owned_leader = {
					limit = {
						has_leader_flag = former_owner@FROM
						has_leader_flag = potential_owner@event_target:potential_owner
					}
					kill_leader = { show_notification = no }
				}
			}
			owner = {
				country_event = {
					id = keep_leaders_bonus_traits.20
				}
			}
		}
	}
}

# transfer leaders to storage while the primitive country exists
# triggered by on_primitive_planet_transferring
# ROOT = planet (before ownership change)
# FROM = country, infiltrator
planet_event = {
	id = keep_leaders.4
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = owner
		owner = {
			OR = {
				exists = ruler
				exists = heir
				any_owned_leader = { is_eligible_transfer_leader_class = yes }
			}
		}
		exists = FROM
		has_observation_outpost = yes
		observation_outpost = {
			has_mission = covert_infiltration
			mission_progress >= 1
		}
	}
	immediate = {
		set_variable = {
			which = infiltration_leader_accumulator
			value = 0
		}
		FROM = {
			set_country_flag = keeping_leaders_infiltration@PREV.owner
			save_event_target_as = potential_owner
		}
		# "argument" for transfer_leader_to_storage
		event_target:global_event_country = { save_event_target_as = storage_owner }
		owner = {
			# "argument" for localistation and set_leader_storage_flags
			save_event_target_as = former_owner
			owner_species = { save_event_target_as = original_species }
			every_owned_leader = {
				limit = { is_eligible_transfer_leader_class = yes }
				ROOT = {
					change_variable = {
						which = infiltration_leader_accumulator
						value = 1
					}
				}
				transfer_leader_to_storage = yes
			}
			if = {
				limit = { exists = heir }
				ROOT = {
					change_variable = {
						which = infiltration_leader_accumulator
						value = 1
					}
				}
				heir = {
					set_name = keep_leaders.former_ruler_name
					set_leader_flag = clear_traits
					save_event_target_as = leader_to_replace
				}
				replace_leader_based_on_pre_ruler_leader_class = yes
				event_target:leader_to_replace = {
					set_leader_flag = former_heir
					add_former_heir_trait = yes
					transfer_leader_to_storage = yes
				}
			}
			if = {
				limit = { exists = ruler }
				ROOT = {
					change_variable = {
						which = infiltration_leader_accumulator
						value = 1
					}
				}
				ruler = {
					set_name = keep_leaders.former_ruler_name
					set_leader_flag = clear_traits
					save_event_target_as = leader_to_replace
				}
				replace_leader_based_on_pre_ruler_leader_class = yes
				event_target:leader_to_replace = {
					set_leader_flag = former_ruler
					add_former_ruler_trait = yes
					transfer_leader_to_storage = yes
				}
			}
		}
	}
}

# keep robotic only
country_event = {
	id = keep_leaders.10
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		log = "keep_leaders.10 keep robotic only"
		save_event_target_as = potential_owner
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_transfer_leader_from_storage = yes
					is_robotic_species_lenient = yes
				}
				if = {
					limit = {
						OR = {
							event_target:potential_owner = { is_necrophage_empire = no }
							is_bypass_leader_restriction_necrophage = yes
						}
						OR = {
							event_target:potential_owner = { is_xenophobe = no }
							is_bypass_leader_restriction_xenophobe = yes
						}
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
			}
		}
		set_update_modifiers_batch = end
	}
}

# keep organic only
country_event = {
	id = keep_leaders.11
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		log = "keep_leaders.11 keep organic only"
		save_event_target_as = potential_owner
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_transfer_leader_from_storage = yes
					is_organic_species = yes
				}
				if = {
					limit = {
						OR = {
							event_target:potential_owner = { is_necrophage_empire = no }
							is_bypass_leader_restriction_necrophage = yes
						}
						OR = {
							event_target:potential_owner = { is_xenophobe = no }
							is_bypass_leader_restriction_xenophobe = yes
						}
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
			}
		}
		set_update_modifiers_batch = end
	}
}

# keep same species only
country_event = {
	id = keep_leaders.12
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		log = "keep_leaders.12 keep same species only"
		save_event_target_as = potential_owner
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_transfer_leader_from_storage = yes
					is_same_species = event_target:potential_owner
				}
				ensure_species_rights_and_take_ownership_of_leader = yes
			}
		}
		set_update_modifiers_batch = end
	}
}

# keep hive only
country_event = {
	id = keep_leaders.14
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		has_utopia = yes
		is_regular_hive_empire = yes
	}
	immediate = {
		log = "keep_leaders.14 keep hive only"
		save_event_target_as = potential_owner
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_transfer_leader_from_storage = yes
					is_hive_species = yes
				}
				ensure_species_rights_and_take_ownership_of_leader = yes
			}
		}
		set_update_modifiers_batch = end
	}
}

# keep 'em all!
country_event = {
	id = keep_leaders.15
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_regular_empire = yes
	}
	immediate = {
		log = "keep_leaders.15 keep as many as possible"
		save_event_target_as = potential_owner
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_transfer_leader_from_storage = yes
					is_eligible_transfer_without_assimilation = yes
				}
				ensure_species_rights_and_take_ownership_of_leader = yes
			}
		}
		set_update_modifiers_batch = end
	}
}

# assimilate
country_event = {
	id = keep_leaders.16
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		has_utopia = yes
	}
	immediate = {
		log = "keep_leaders.16 assimilation"
		save_event_target_as = potential_owner
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = { is_eligible_transfer_leader_from_storage = yes }
				if = {
					limit = { event_target:potential_owner = { is_machine_empire = yes } }
					if = {
						limit = { is_eligible_for_machine_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_ego_assimilation
						}
						modify_species = {
							species = species
							add_trait = trait_cybernetic
							add_traits_at_start_of_list = yes
							change_scoped_species = no
							effect = {
								save_event_target_as = cyborg_species
							}
						}
						if = {
							limit = { event_target:cyborg_species = { has_trait = trait_hive_mind } }
							modify_species = {
								base = species
								species = event_target:cyborg_species
								remove_trait = trait_hive_mind
								change_scoped_species = no
								effect = {
									save_event_target_as = cyborg_species
								}
							}
						}
						if = {
							limit = { event_target:cyborg_species = { has_trait = trait_self_modified } }
							modify_species = {
								base = species
								species = event_target:cyborg_species
								remove_trait = trait_self_modified
								change_scoped_species = no
								effect = {
									save_event_target_as = cyborg_species
								}
							}
						}
						change_species = event_target:cyborg_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						fire_on_action = { on_action = on_leader_species_changed }
					}
					else_if = {
						limit = { is_eligible_transfer_without_assimilation = yes }
						ensure_species_rights_and_take_ownership_of_leader = yes
					}
				}
				else_if = {
					limit = { event_target:potential_owner = { is_hive_empire = yes } }
					if = {
						limit = { is_eligible_for_hive_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_ego_assimilation
						}
						modify_species = {
							species = species
							add_trait = trait_hive_mind
							add_traits_at_start_of_list = yes
							change_scoped_species = no
							effect = {
								save_event_target_as = hived_species
							}
						}
						if = {
							limit = { event_target:hived_species = { has_trait = trait_self_modified } }
							modify_species = {
								base = species
								species = event_target:hived_species
								remove_trait = trait_self_modified
								change_scoped_species = no
								effect = {
									save_event_target_as = hived_species
								}
							}
						}
						change_species = event_target:hived_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						fire_on_action = { on_action = on_leader_species_changed }
					}
					else_if = {
						limit = { is_eligible_transfer_without_assimilation = yes }
						ensure_species_rights_and_take_ownership_of_leader = yes
					}
				}
				else_if = {
					limit = { event_target:potential_owner = { is_regular_empire = yes } }
					if = {
						limit = {
							has_global_flag = deassimilate_machines_installed
							is_eligible_for_unmachine_assimilation_species = yes
						}
						species = {
							save_event_target_as = machine_species
						}
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_deassimilation
						}
						random_galaxy_species = {
							limit = { has_species_flag = mechanical_species_of_machine_species@event_target:machine_species }
							save_event_target_as = mechanical_species
						}
						if = {
							limit = { NOT = { exists = event_target:mechanical_species } }
							event_target:machine_species = {
								create_species = {
									name = THIS
									plural = THIS
									adjective = THIS
									name_list = THIS
									class = ROBOT
									portrait = THIS
									homeworld = THIS
									traits = THIS
								}
							}
							modify_species = {
								species = last_created_species
								add_traits_at_start_of_list = yes
								add_trait = trait_mechanical
								remove_trait = trait_machine_unit
								effect = {
									set_species_flag = mechanical_species_of_machine_species@event_target:machine_species
									save_event_target_as = mechanical_species
								}
							}
						}
						change_species = event_target:mechanical_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						fire_on_action = { on_action = on_leader_species_changed }
					}
					else_if = {
						limit = { is_eligible_for_synthetic_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_tech_assimilation
						}
						# if you convert them to synths, you lose the secret hive magic
						if = {
							limit = { has_leader_flag = former_gestalt_ruler }
							remove_leader_flag = former_gestalt_ruler
						}
						change_species = event_target:potential_owner
						change_leader_portrait = event_target:potential_owner
						ensure_species_rights_and_take_ownership_of_leader = yes
						fire_on_action = { on_action = on_leader_species_changed }
					}
					else_if = {
						limit = { is_eligible_for_cybernetic_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_tech_assimilation
						}
						modify_species = {
							species = species
							add_trait = trait_cybernetic
							add_traits_at_start_of_list = yes
							change_scoped_species = no
							effect = {
								save_event_target_as = cyborg_species
							}
						}
						if = {
							limit = { event_target:cyborg_species = { has_trait = trait_self_modified } }
							modify_species = {
								base = species
								species = event_target:cyborg_species
								remove_trait = trait_self_modified
								change_scoped_species = no
								effect = {
									save_event_target_as = cyborg_species
								}
							}
						}
						change_species = event_target:cyborg_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						fire_on_action = { on_action = on_leader_species_changed }
					}
					else_if = {
						limit = { is_eligible_for_psionic_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_psi_assimilation
						}
						modify_species = {
							species = species
							add_trait = trait_psionic
							add_traits_at_start_of_list = yes
							change_scoped_species = no
							effect = {
								save_event_target_as = psionic_species
							}
						}
						if = {
							limit = { event_target:psionic_species = { has_trait = trait_latent_psionic } }
							modify_species = {
								base = species
								species = event_target:psionic_species
								remove_trait = trait_latent_psionic
								change_scoped_species = no
								effect = {
									save_event_target_as = psionic_species
								}
							}
						}
						if = {
							limit = { event_target:psionic_species = { has_trait = trait_self_modified } }
							modify_species = {
								base = species
								species = event_target:psionic_species
								remove_trait = trait_self_modified
								change_scoped_species = no
								effect = {
									save_event_target_as = psionic_species
								}
							}
						}
						change_species = event_target:psionic_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						fire_on_action = { on_action = on_leader_species_changed }
					}
					else_if = {
						limit = { is_eligible_for_unhive_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_deassimilation
						}
						modify_species = {
							species = species
							remove_trait = trait_hive_mind
							change_scoped_species = no
							effect = {
								save_event_target_as = unhived_species
							}
						}
						if = {
							limit = { event_target:unhived_species = { has_trait = trait_self_modified } }
							modify_species = {
								base = species
								species = event_target:unhived_species
								remove_trait = trait_self_modified
								change_scoped_species = no
								effect = {
									save_event_target_as = unhived_species
								}
							}
						}
						change_species = event_target:unhived_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						fire_on_action = { on_action = on_leader_species_changed }
					}
					else_if = {
						limit = { is_eligible_transfer_without_assimilation = yes }
						ensure_species_rights_and_take_ownership_of_leader = yes
					}
				}
			}
		}
		set_update_modifiers_batch = end
	}
}

# necrophage
country_event = {
	id = keep_leaders.17
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		has_necroids = yes
		is_necrophage_empire = yes
	}
	immediate = {
		log = "keep_leaders.17 necrophage"
		save_event_target_as = potential_owner
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = { is_eligible_transfer_leader_from_storage = yes }
				if = {
					limit = { is_robotic_species = no }
					if = {
						limit = {
							OR = {
								is_hive_species = yes
								event_target:potential_owner = {
									OR = {
										has_valid_civic = civic_fanatic_purifiers
										has_policy_flag = purge_allowed
									}
								}
							}
							NAND = {
								has_citizenship_type = {
									country = event_target:potential_owner
									type = citizenship_purge
								}
								has_living_standard = {
									country = event_target:potential_owner
									type = living_standard_none
								}
								has_purge_type = {
									country = event_target:potential_owner
									type = purge_necrophage
								}
							}
						}
						set_citizenship_type = {
							country = event_target:potential_owner
							type = citizenship_purge
							cooldown = no
						}
						set_living_standard = {
							country = event_target:potential_owner
							type = living_standard_none
							cooldown = no
						}
						set_purge_type = {
							country = event_target:potential_owner
							type = purge_necrophage
							cooldown = no
						}
					}
					# if you necrophage them, you lose the secret hive magic
					if = {
						limit = { has_leader_flag = former_gestalt_ruler }
						remove_leader_flag = former_gestalt_ruler
					}
					change_species = event_target:potential_owner
					change_leader_portrait = event_target:potential_owner
					unassign_leader = THIS
					set_owner = event_target:potential_owner
					fire_on_action = { on_action = on_leader_species_changed }
				}
				else_if = {
					limit = {
						is_robotic_species = yes
						event_target:potential_owner = { has_full_ai_rights = yes }
						is_bypass_leader_restriction_necrophage = yes
						OR = {
							event_target:potential_owner = { is_xenophobe = no }
							is_bypass_leader_restriction_xenophobe = yes
						}
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
			}
		}
		set_update_modifiers_batch = end
	}
}

# THIS = country
# FROM = leader
# triggered by on_leader_death
country_event = {
	id = keep_leaders.100
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FROM
		FROM = { has_leader_flag = former_gestalt_ruler }
		any_owned_pop_species = {
			is_same_species = FROM
		}
	}
	immediate = {
		log = "keep_leaders.100 former gestalt leader [From.GetName] death"
		# NOTE: using clone_leader here causes a lot of error logs related to random being used in a forbidden location
		clone_leader = {
			target = FROM
			effect = {
				set_leader_flag = former_gestalt_ruler_clone
				if = {
					limit = { is_lithoid = yes }
					if = {
						limit = { is_hive_species = yes }
						set_age = 40
					}
					else = {
						set_age = 70
					}
				}
				else_if = {
					limit = { is_organic_species = yes }
					if = {
						limit = { is_hive_species = yes }
						set_age = 15
					}
					else = {
						set_age = 40
					}
				}
				save_event_target_as = exiled_former_gestalt_ruler
				exile_leader_as = exiled_former_gestalt_ruler@THIS
			}
		}
		country_event = {
			id = keep_leaders.101
			scopes = {
				from = event_target:exiled_former_gestalt_ruler
			}
			days = 30
			random = 60
		}
	}
}

# the "dead" gestalt leader re-emerges 1-3 months after keep_leaders.100
# THIS = country
# FROM = the exiled leader
country_event = {
	id = keep_leaders.101
	is_triggered_only = yes
	title = keep_leaders.101.title
	desc = {
		text = keep_leaders.101.desc
		trigger = {
			is_hive_empire = no
			is_machine_empire = no
		}
	}
	desc = {
		text = keep_leaders.101.desc.hive
		trigger = {
			is_hive_empire = yes
		}
	}
	desc = {
		text = keep_leaders.101.desc.mach
		trigger = {
			is_machine_empire = yes
		}
	}
	picture = {
		trigger = {
			FROM = { is_organic_species = yes }
		}
		picture = GFX_evt_hive_mind
	}
	picture = {
		trigger = {
			FROM = { is_robotic_species = yes }
		}
		picture = GFX_evt_machine_sapience
	}
	show_sound = {
		trigger = {
			FROM = { is_organic_species = yes }
		}
		sound = event_evolution_mastery
	}
	show_sound = {
		trigger = {
			FROM = { is_robotic_species = yes }
		}
		sound = event_synthetic_evolution
	}
	trigger = {
		exists = FROM
		FROM = { has_leader_flag = former_gestalt_ruler_clone }
		any_owned_pop_species = {
			is_same_species = FROM
		}
	}
	immediate = {
		log = "keep_leaders.101 former gestalt leader [From.GetFirstName] respawned"
	}
	option = {
		name = INCREDIBLE
		custom_tooltip = keep_leaders.101.a.tooltip
		hidden_effect = {
			clone_leader = {
				target = FROM
				effect = {
					set_leader_flag = former_gestalt_ruler
				}
			}
			FROM = { kill_leader = { show_notification = no } }
		}
	}
}