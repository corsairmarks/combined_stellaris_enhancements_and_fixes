namespace = keep_leaders

# flag mod as active
event = {
	id = keep_leaders.13
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	trigger = {
		NOT = { has_global_flag = keep_leaders_installed }
	}
	immediate = {
		set_global_flag = keep_leaders_installed
	}
}

# TODO: test event, remove when finished!
country_event = {
	id = keep_leaders.1300
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		if = {
			limit = { exists = ruler }
			log = "ruler of [This.GetName] is [This.Ruler.GetName]"
		}
		else = {
			log = "[This.GetName] has no ruler"
		}
		if = {
			limit = { exists = heir }
			log = "heir of [This.GetName] is [This.Heir.GetName]"
		}
		else = {
			log = "[This.GetName] has no heir"
		}
		every_owned_leader = {
			log = "Leader [This.GetName]"
			switch = {
				trigger = leader_class
				ruler = {
					log = "...is a ruler"
					switch = {
						trigger = pre_ruler_leader_class
						ruler = { log = "...was a ruler - how the heck did that happen?" }
						governor = { log = "...was a governor" }
						scientist = { log = "...was a scientist" }
						admiral = { log = "...was an admiral" }
						general = { log = "...was a general" }
						envoy = { log = "...was an envoy" }
						default = { log = "...was an unknown class" }
					}
				}
				governor = { log = "...is a governor" }
				scientist = { log = "...is a scientist" }
				admiral = { log = "...is an admiral" }
				general = { log = "...is a general" }
				envoy = { log = "...is an envoy" }
				default = { log = "...is an unknown class" }
			}
		}
	}
}

# THIS = overlord
# FROM = subject
# triggered by on_subject_integrated
country_event = {
	id = keep_leaders.1
	picture = GFX_evt_intelligence_report
	show_sound = event_administrative_work
	title = keep_leaders.1.title
	desc = {
		trigger = {
			NOR = {
				has_active_event = {
					keep_leaders.2
				}
				is_variable_set = keeping_leaders_conquest
			}
		}
		text = keep_leaders.1.desc.integration
	}
	desc = {
		trigger = {
			has_active_event = {
				keep_leaders.2
			}
			is_variable_set = keeping_leaders_conquest
			check_variable = {
				which = keeping_leaders_conquest
				value = 1
			}
		}
		text = keep_leaders.1.desc.conquest
	}
	is_triggered_only = yes
	trigger = {
		exists = FROM
		FROM = { any_owned_leader = { is_eligible_class_for_transfer_leader = yes } }
	}
	immediate = {
		log = "country [Root.GetRealName] integrated by [From.GetRealName]"
		# variables for the counts from accumulate_leader
		set_variable = {
			which = leader_accumulator
			value = 0
		}
		set_variable = {
			which = leader_organic_accumulator
			value = 0
		}
		set_variable = {
			which = leader_organic_noncyborg_accumulator
			value = 0
		}
		set_variable = {
			which = leader_not_same_species_accumulator
			value = 0
		}
		set_variable = {
			which = leader_necrophagable_accumulator
			value = 0
		}
		# "arguments" for accumulate_leader
		save_event_target_as = variable_storage
		save_event_target_as = prospective_owner
		# count the leaders so we know the multiplier for adding resources
		# like unity or society research for empires that qualify
		FROM = {
			every_owned_leader = {
				limit = { is_eligible_class_for_transfer_leader = yes }
				accumulate_leader = yes
			}
			if = {
				limit = { exists = heir }
				heir = {
					rename_leader_with_title_and_country = yes
					set_leader_flag = former_gestalt_ruler
					accumulate_leader = yes
					save_event_target_as = leader_to_replace
				}
				replace_leader_based_on_pre_ruler_leader_class = yes
				if = {
					limit = { event_target:leader_to_replace = { leader_class = ruler } }
					replace_leader_based_on_government_type = yes
					# if the heir still hasn't been replaced, then just deal with it
				}
			}
			if = {
				limit = { exists = ruler }
				ruler = {
					rename_leader_with_title_and_country = yes
					set_leader_flag = former_gestalt_ruler
					accumulate_leader = yes
					save_event_target_as = leader_to_replace
				}
				replace_leader_based_on_pre_ruler_leader_class = yes
				if = {
					limit = { event_target:leader_to_replace = { leader_class = ruler } }
					replace_leader_based_on_government_type = yes
					# if the ruler still hasn't been replaced, then just deal with it
				}
			}
		}
	}
	# keep none
	option = {
		name = {
			text = keep_leaders.1.a
			trigger = {
				is_homicidal = no
			}
		}
		name = {
			text = keep_leaders.1.a.pur
			trigger = {
				has_valid_civic = civic_fanatic_purifiers
			}
		}
		name = {
			text = keep_leaders.1.a.swarm
			trigger = {
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		name = {
			text = keep_leaders.1.a.term
			trigger = {
				has_valid_civic = civic_machine_terminator
			}
		}
		if = {
			limit = { NOT = { has_valid_civic = civic_hive_devouring_swarm } }
			custom_tooltip = keep_leaders.1.a.tooltip
		}
		if = {
			limit = { has_valid_civic = civic_fanatic_purifiers }
			add_resource = {
				unity = 5
				mult = leader_not_same_species_accumulator
			}
		}
		else_if = {
			limit = { has_valid_civic = civic_hive_devouring_swarm }
			custom_tooltip = keep_leaders.1.a.swarm.tooltip
			add_resource = {
				society_research = 5
				mult = leader_organic_accumulator
			}
		}
		else_if ={
			limit = { has_valid_civic = civic_machine_terminator }
			add_resource = {
				unity = 5
				mult = leader_organic_accumulator
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.serv.fail_text
				has_valid_civic = civic_machine_servitor
			}
			custom_tooltip = {
				fail_text = empire_is_xenophile
				is_xenophile = no
			}
			custom_tooltip = {
				fail_text = empire_is_pacifist
				is_pacifist = no
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_xenophobe = yes
			}
			modifier = {
				factor = 0.5
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
			modifier = {
				factor = 3
				has_valid_civic = civic_fanatic_purifiers
				FROM = {
					count_owned_leader = {
						count = all
						limit = {
							OR = {
								is_eligible_class_for_transfer_leader = no
								NOT = { is_same_species = ROOT }
							}
						}
					}
				}
			}
			modifier = {
				factor = 5
				has_valid_civic = civic_machine_terminator
				FROM = {
					count_owned_leader = {
						count = all
						limit = {
							OR = {
								is_eligible_class_for_transfer_leader = no
								is_robotic_species = no
							}
						}
					}
				}
			}
			modifier = {
				factor = 20
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		# do nothing - all the leaders will vanish with their country
	}
	# keep none (nice)
	option = {
		name = {
			text = keep_leaders.1.b
			trigger = {
				is_regular_empire = yes
			}
		}
		name = {
			text = keep_leaders.1.b.serv
			trigger = {
				has_valid_civic = civic_machine_servitor
			}
		}
		name = {
			text = keep_leaders.1.b.gest.exclusive
			trigger = {
				OR = {
					is_regular_hive_empire = yes
					AND = {
						is_machine_empire = yes
						NOT = { has_valid_civic = civic_machine_servitor }
					}
				}
			}
		}
		if = {
			limit = { has_valid_civic = civic_machine_servitor }
			custom_tooltip = keep_leaders.1.b.serv.tooltip
		}
		else_if = {
			limit = {
				OR = {
					is_hive_empire = yes
					is_machine_empire = yes
				}
			}
			custom_tooltip = keep_leaders.1.b.gest.exclusive.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.b.tooltip
		}
		trigger = {
			NOT = { has_valid_civic = civic_hive_devouring_swarm }
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.pur.fail_text
				if = {
					limit = { has_valid_civic = civic_fanatic_purifiers }
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_same_species = ROOT
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.term.fail_text
				if = {
					limit = { has_valid_civic = civic_machine_terminator }
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_robotic_species = yes
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.mach.fail_text
				if = {
					limit = {
						is_machine_empire = yes
						NOT = { has_valid_civic = civic_machine_servitor }
					}
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_robotic_species = yes
									AND = {
										ROOT = { has_valid_civic = civic_machine_assimilator }
										is_cyborg_species = yes
									}
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.b.hive.fail_text
				if = {
					limit = { is_regular_hive_empire = yes }
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_hive_species = yes
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				has_valid_civic = civic_machine_servitor
			}
			modifier = {
				factor = 2
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
			modifier = {
				factor = 100
				has_valid_civic = civic_inwards_perfection
			}
		}
		# do nothing - all the leaders will vanish with their country
	}
	# keep mechanical only - non-assimilation
	option = {
		name = {
			text = keep_leaders.1.c
			trigger = {
				is_regular_empire = yes
				NOR = {
					has_country_flag = flesh_weakened
					has_country_flag = synthetic_empire
				}
			}
		}
		name = {
			text = keep_leaders.1.c.term
			trigger = { has_valid_civic = civic_machine_terminator }
		}
		name = {
			text = keep_leaders.1.c.mach
			trigger = {
				OR = {
					has_country_flag = flesh_weakened
					has_country_flag = synthetic_empire
					AND = {
						is_machine_empire = yes
						NOR = {
							has_valid_civic = civic_machine_servitor
							has_valid_civic = civic_machine_terminator
						}
					}
				}
				FROM = {
					any_owned_leader = {
						is_eligible_class_for_transfer_leader = yes
						OR = {
							is_robotic_species = yes
							AND = {
								is_cyborg_leader = yes
								ROOT = { empire_considers_cyborgs_machines = yes }
							}
						}
					}
					any_owned_leader = {
						is_eligible_class_for_transfer_leader = yes
						is_organic_species = yes
						is_cyborg_leader = no
					}
				}
			}
		}
		name = {
			text = keep_leaders.1.c.mach.exclusive
			trigger = {
				empire_considers_cyborgs_machines = yes
				FROM = {
					count_owned_leader = {
						count = all
						limit = {
							OR = {
								is_eligible_class_for_transfer_leader = yes
								is_robotic_species = yes
								is_cyborg_leader = yes
							}
						}
					}
				}
			}
		}
		if = {
			limit = {
				FROM = {
					any_owned_leader = {
						is_eligible_class_for_transfer_leader = yes
						is_organic_species = yes
					}
				}
			}
			if = {
				limit = { ROOT = { empire_considers_cyborgs_machines = yes } }
				if = {
					limit = {
						FROM = {
							count_owned_leader = {
								count = all
								limit = {
									OR = {
										is_eligible_class_for_transfer_leader = no
										is_cyborg_leader = yes
										is_robotic_species = yes
									}
								}
							}
						}
					}
					custom_tooltip = keep_leaders.1.c.cyb.exclusive.tooltip
				}
				else = {
					custom_tooltip = keep_leaders.1.c.cyb.tooltip
				}
			}
			else_if = {
				limit = { has_valid_civic = civic_machine_terminator }
				custom_tooltip = keep_leaders.1.c.term.tooltip
			}
			else_if = {
				limit = { is_synthetic_empire = yes }
				custom_tooltip = keep_leaders.1.c.mach.tooltip
			}
			else = {
				custom_tooltip = keep_leaders.1.c.tooltip
			}
		}
		else = {
			custom_tooltip = keep_leaders.1.c.mach.exclusive.tooltip
		}
		trigger = {
			is_hive_empire = no
			FROM = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_organic_species = yes
				}
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					OR = {
						is_robotic_species = yes
						AND = {
							is_cyborg_leader = yes
							ROOT = { empire_considers_cyborgs_machines = yes }
						}
					}
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.serv.fail_text
				NOT = { has_valid_civic = civic_machine_servitor }
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
					FROM = {
						any_owned_leader = {
							is_military_leader = yes
							species = { has_species_flag = allow_military_leaders_for_necrophage }
							OR = {
								is_robotic_species = yes
								AND = {
									is_cyborg_leader = no
									ROOT = { empire_considers_cyborgs_machines = yes }
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.phobe.fail_text
				if = {
					limit = { is_xenophobe = yes }
					FROM = {
						any_owned_leader = {
							is_military_leader = yes
							species = { has_species_flag = allow_military_leaders_for_xenophobe }
							OR = {
								is_robotic_species = yes
								AND = {
									is_cyborg_leader = no
									ROOT = { empire_considers_cyborgs_machines = yes }
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = ROBOTS_ARE_OUTLAWED
				has_full_ai_rights = yes
			}
			custom_tooltip = {
				fail_text = empire_is_xenophile
				is_xenophile = no
			}
			custom_tooltip = {
				fail_text = empire_is_pacifist
				is_pacifist = no
			}
		}
		if = {
			limit = { has_valid_civic = civic_machine_terminator }
			add_resource = {
				unity = 5
				mult = leader_organic_accumulator
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 10
				is_machine_empire = yes
				NOT = { has_valid_civic = civic_machine_assimilator }
			}
			modifier = {
				factor = 0
				is_spiritualist = yes
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.3
				scopes = { from = FROM }
			}
		}
	}
	# keep mechanical only (nice) - non-assimilation
	option = {
		name = {
			text = keep_leaders.1.d
			trigger = {
				NOT = { has_valid_civic = civic_machine_servitor }
			}
		}
		name = {
			text = keep_leaders.1.d.serv
			trigger = {
				has_valid_civic = civic_machine_servitor
			}
		}
		if = {
			limit = { has_valid_civic = civic_machine_servitor }
			custom_tooltip = keep_leaders.1.d.serv.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.d.tooltip
		}
		trigger = {
			is_hive_empire = no
			FROM = {
				OR = {
					ROOT = { is_machine_empire = yes }
					any_owned_leader = {
						is_eligible_class_for_transfer_leader = yes
						is_organic_species = yes
					}
				}
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					OR = {
						is_robotic_species = yes
						AND = {
							is_cyborg_leader = yes
							ROOT = { empire_considers_cyborgs_machines = yes }
						}
					}
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.term.fail_text
				if = {
					limit  = { has_valid_civic = civic_machine_terminator }
					always = no
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.mach.fail_text
				if = {
					limit  = {
						is_machine_empire = yes
						NOT = { has_valid_civic = civic_machine_terminator }
					}
					has_valid_civic = civic_machine_servitor
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
					FROM = {
						any_owned_leader = {
							is_military_leader = yes
							species = { has_species_flag = allow_military_leaders_for_necrophage }
							OR = {
								is_robotic_species = yes
								AND = {
									is_cyborg_leader = no
									ROOT = { empire_considers_cyborgs_machines = yes }
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.phobe.fail_text
				if = {
					limit = { is_xenophobe = yes }
					FROM = {
						any_owned_leader = {
							is_military_leader = yes
							species = { has_species_flag = allow_military_leaders_for_xenophobe }
							OR = {
								is_robotic_species = yes
								AND = {
									is_cyborg_leader = no
									ROOT = { empire_considers_cyborgs_machines = yes }
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = ROBOTS_ARE_OUTLAWED
				has_full_ai_rights = yes
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_materialist = yes
			}
			modifier = {
				factor = 0
				is_spiritualist = yes
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.3
				scopes = { from = FROM }
			}
		}
	}
	# keep organic only - non-assimilation
	option = {
		name = {
			text = keep_leaders.1.e
			trigger = {
				is_spiritualist = no
				has_full_ai_rights = no
			}
		}
		name = {
			text = keep_leaders.1.e.spir
			trigger = {
				is_spiritualist = yes
				has_full_ai_rights = no
			}
		}
		name = {
			text = keep_leaders.1.e.ai
			trigger = {
				has_full_ai_rights = yes
			}
		}
		custom_tooltip = keep_leaders.1.e.tooltip
		trigger = {
			is_regular_empire = yes
			FROM = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_organic_species = yes
				}
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_robotic_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.pur.fail_text
				NOT = { has_valid_civic = civic_fanatic_purifiers }
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_same_species = ROOT 
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_necrophage }
									}
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe
				if = {
					limit = { is_xenophobe = yes }
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_same_species = ROOT
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_xenophobe }
									}
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_spiritualist = yes
			}
			modifier = {
				factor = 0
				is_materialist = yes
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.4
				scopes = { from = FROM }
			}
		}
	}
	# same species only
	option = {
		name = {
			text = keep_leaders.1.g
			trigger = {
				NOT = { has_valid_civic = civic_fanatic_purifiers }
			}
		}
		name = {
			text = keep_leaders.1.g.pur
			trigger = {
				has_valid_civic = civic_fanatic_purifiers
			}
		}
		if = {
			limit = { has_valid_civic = civic_fanatic_purifiers }
			custom_tooltip = keep_leaders.1.g.pur.tooltip
			add_resource = {
				unity = 5
				mult = leader_not_same_species_accumulator
			}
		}
		else = {
			custom_tooltip = keep_leaders.1.g.tooltip
		}
		trigger = {
			is_regular_empire = yes
			FROM = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_same_species = ROOT
				}
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					NOT = { is_same_species = ROOT }
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = empire_is_xenophile
				is_xenophile = no
			}
			custom_tooltip = {
				fail_text = empire_is_pacifist
				is_pacifist = no
			}
		}
		if = {
			limit = { has_valid_civic = civic_fanatic_purifiers }
			if = {
				limit = { has_valid_civic = civic_fanatic_purifiers }
				add_resource = {
					unity = 5
					mult = leader_not_same_species_accumulator
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_xenophobe = yes
			}
			modifier = {
				factor = 2
				has_valid_civic = civic_fanatic_purifiers
			}
			modifier = {
				factor = 0.5
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.5
				scopes = { from = FROM }
			}
		}
	}
	# same species only (nice)
	option = {
		name = keep_leaders.1.h
		custom_tooltip = keep_leaders.1.h.tooltip
		trigger = {
			is_regular_empire = yes
			NOT = { has_valid_civic = civic_fanatic_purifiers }
			FROM = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_same_species = ROOT
				}
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					NOT = { is_same_species = ROOT }
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = empire_is_xenophile
				is_xenophile = no
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 0.5
				is_xenophobe = yes
			}
			modifier = {
				factor = 4
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.5
				scopes = { from = FROM }
			}
		}
	}
	# hive keep hive only
	option = {
		name = {
			text = keep_leaders.1.i.hive
			trigger = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_hive_species = no
				}
			}
		}
		name = {
			text = keep_leaders.1.i.hive.exclusive
			trigger = {
				count_owned_leader = {
					count = all
					limit = {
						OR = {
							is_eligible_class_for_transfer_leader = no
							is_hive_species = yes
						}
					}
				}
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_hive_species = no
				}
			}
			custom_tooltip = keep_leaders.1.i.hive.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.i.hive.exclusive.tooltip
		}
		trigger = {
			is_hive_empire = yes
			FROM = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_hive_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.swarm.fail_text
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		ai_chance = {
			factor = 5
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.6
				scopes = { from = FROM }
			}
		}
	}
	# try to keep as many as possible
	option = {
		name = {
			text = keep_leaders.1.j
			trigger = {
				NOT = { has_valid_civic = civic_fanatic_purifiers }
			}
		}
		name = {
			text = keep_leaders.1.j.pur
			trigger = {
				has_valid_civic = civic_fanatic_purifiers
			}
		}
		if = {
			limit = { NOT = { has_valid_civic = civic_fanatic_purifiers } }
			custom_tooltip = keep_leaders.1.j.tooltip
		}
		else = {
			custom_tooltip = keep_leaders.1.j.pur.tooltip
		}
		trigger = {
			is_regular_empire = yes
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_same_species = ROOT
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_necrophage }
									}
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe
				if = {
					limit = { is_xenophobe = yes }
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_same_species = ROOT
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_xenophobe }
									}
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.pur.fail_text
				if = {
					limit = { has_valid_civic = civic_fanatic_purifiers }
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = no
									is_same_species = ROOT
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			factor = 1
			modifier = {
				factor = 2
				is_pacifist = yes
			}
			modifier = {
				factor = 2
				is_xenophile = yes
			}
			modifier = {
				factor = 2
				has_full_ai_rights = yes
				FROM = { any_owned_leader = { is_robotic_species = yes } }
			}
			modifier = {
				factor = 0
				has_valid_civic = civic_inwards_perfection
			}
			modifier = {
				factor = 20
				has_valid_civic = civic_fanatic_purifiers
				FROM = {
					count_owned_leader = {
						count = all
						limit = {
							OR = {
								is_eligible_class_for_transfer_leader = no
								is_same_species = ROOT
							}
						}
					}
				}
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.7
				scopes = { from = FROM }
			}
		}
	}
	# assimilate: hive
	option = {
		name = keep_leaders.1.k.hive
		trigger = {
			hidden_trigger = {
				has_utopia = yes
			}
			is_hive_empire = yes
			FROM = {
				OR = {
					is_machine_empire = no
					has_valid_civic = civic_machine_assimilator
				}
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_robotic_species = no
					NOT = { has_trait = trait_hive_mind }
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.bio.fail_text
				has_ascension_perk = ap_evolutionary_mastery
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.swarm.fail_text
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		ai_chance = {
			factor = 10
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.8
				scopes = { from = FROM }
			}
		}
	}
	# assimilate: unhive
	option = {
		name = keep_leaders.1.k.unhive
		trigger = {
			hidden_trigger = {
				has_utopia = yes
			}
			is_hive_empire = no
			FROM = {
				is_hive_empire = yes
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					has_trait = trait_hive_mind
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.bio.fail_text
				has_ascension_perk = ap_evolutionary_mastery
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = yes
									is_same_species = ROOT
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_necrophage }
									}
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe
				if = {
					limit = { is_xenophobe = yes }
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = yes
									is_same_species = ROOT
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_necrophage }
									}
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			factor = 10
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.8
				scopes = { from = FROM }
			}
		}
	}
	# assimilate: psionic
	option = {
		name = keep_leaders.1.k.psi
		trigger = {
			hidden_trigger = {
				has_utopia = yes
			}
			FROM = {
				is_hive_empire = no
				is_machine_empire = no
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					NOR = {
						has_trait = trait_psionic
						has_trait = trait_cybernetic
					}
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.psionic.fail_text
				has_ascension_perk = ap_transcendence
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = yes
									is_same_species = ROOT
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_necrophage }
									}
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe
				if = {
					limit = { is_xenophobe = yes }
					FROM = {
						any_owned_leader = {
							OR = {
								is_eligible_class_for_transfer_leader = yes
								is_same_species = ROOT
								AND = {
									is_military_leader = yes
									species = { has_species_flag = allow_military_leaders_for_xenophobe }
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			factor = 10
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.8
				scopes = { from = FROM }
			}
		}
	}
	# assimilate: cybernetic
	option = {
		name = keep_leaders.1.k.cyb
		trigger = {
			hidden_trigger = {
				has_utopia = yes
				NOT = { has_country_flag = synthetic_empire }
			}
			FROM = {
				is_hive_empire = no
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_organic_species = yes
					is_cyborg_leader = no
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.cyb1.fail_text
				has_ascension_perk = ap_the_flesh_is_weak
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.k.cyb2.fail_text
				has_country_flag = flesh_weakened
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.necro.fail_text
				if = {
					limit = {
						has_origin = origin_necrophage
						has_trait = trait_necrophage
					}
					FROM = {
						count_owned_leader = {
							count = all
							limit = {
								OR = {
									is_eligible_class_for_transfer_leader = yes
									is_same_species = ROOT
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_necrophage }
									}
								}
							}
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = empire_is_xenophobe
				if = {
					limit = { is_xenophobe = yes }
					FROM = {
						any_owned_leader = {
							is_eligible_class_for_transfer_leader = yes
							OR = {
								is_same_species = ROOT
								AND = {
									is_military_leader = yes
									species = { has_species_flag = allow_military_leaders_for_xenophobe }
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			factor = 10
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.8
				scopes = { from = FROM }
			}	
		}
	}
	# assimilate: synthetic
	option = {
		name = keep_leaders.1.k.synth
		trigger = {
			hidden_trigger = {
				has_utopia = yes
				has_ascension_perk = ap_the_flesh_is_weak
				has_country_flag = flesh_weakened
			}
			FROM = {
				is_hive_empire = no
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_organic_species = yes
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.synth1.fail_text
				has_ascension_perk = ap_synthetic_evolution
			}
			custom_tooltip = {
				fail_text = keep_leaders.1.k.synth2.fail_text
				has_country_flag = synthetic_empire
			}
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 0.5
				is_xenophile = yes
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.8
				scopes = { from = FROM }
			}
		}
	}
	# assimilate: assimilator
	option = {
		name = keep_leaders.1.k.assim
		trigger = {
			hidden_trigger = {
				has_synthethic_dawn = yes
			}
			is_machine_empire = yes
			FROM = {
				is_hive_empire = no
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					is_organic_species = yes
					is_cyborg_leader = no
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = keep_leaders.1.k.mach.fail_text
				has_valid_civic = civic_machine_assimilator
			}
		}
		ai_chance = {
			factor = 20
		}
		add_resource= {
			unity = 5
			society_research = 5
			mult = leader_organic_noncyborg_accumulator
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.8
				scopes = { from = FROM }
			}
		}
	}
	# necrophage (kinda like assimilation in terms of the outcome)
	option = {
		name = keep_leaders.1.k.necro
		custom_tooltip = keep_leaders.1.k.necro.tooltip
		trigger = {
			hidden_trigger = {
				has_necroids = yes
			}
			has_origin = origin_necrophage
			has_trait = trait_necrophage
			FROM = {
				any_owned_leader = {
					is_eligible_class_for_transfer_leader = yes
					NOT = {
						has_slavery_type = {
							country = ROOT
							type = slavery_livestock
						}
					}
					species = {
						is_sapient = yes
						species_has_happiness_with_owner = ROOT
					}
				}
			}
		}
		allow = {
			custom_tooltip = {
				fail_text = CANNOT_NECROPHAGE_MACHINES
				FROM = {
					any_owned_leader = {
						is_eligible_class_for_transfer_leader = yes
						is_robotic_species = no
					}
				}
			}
		}
		# necrophage unity
		if = {
			limit = { has_swapped_tradition = tr_harmony_unity_of_self }
			add_resource = {
				unity = 5
				mult = leader_necrophagable_accumulator
			}
		}
		ai_chance = {
			factor = 10
			modifier = {
				factor = 2
				has_policy_flag = purge_allowed
			}
		}
		hidden_effect = {
			country_event = {
				id = keep_leaders.9
				scopes = { from = FROM }
			}
		}
	}
	after = {
		hidden_effect = {
			# clean up variables used in this event
			if = {
				limit = { is_variable_set = leader_accumulator }
				clear_variable = leader_accumulator
			}
			if = {
				limit = { is_variable_set = leader_organic_accumulator }
				clear_variable = leader_organic_accumulator
			}
			if = {
				limit = { is_variable_set = leader_organic_noncyborg_accumulator }
				clear_variable = leader_organic_noncyborg_accumulator
			}
			if = {
				limit = { is_variable_set = leader_not_same_species_accumulator }
				clear_variable = leader_not_same_species_accumulator
			}
			if = {
				limit = { is_variable_set = leader_necrophagable_accumulator }
				clear_variable = leader_necrophagable_accumulator
			}
			if = {
				limit = { is_variable_set = keeping_leaders_conquest }
				clear_variable = keeping_leaders_conquest
			}
		}
	}
}

# THIS = destroyed country
# FROM = optional, destroyer (country)
# triggered by on_country_destroyed
country_event = {
	id = keep_leaders.2
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		ROOT = { is_country_type = primitive }
		exists = FROM
		FROM = { is_country_type = default }
	}
	immediate = {
		log = "primitive country [Root.GetRealName] destroyed by [From.GetRealName]"
		# fires the above event - hooray for reuse!
		FROM = {
			set_variable = {
				which = keeping_leaders_conquest
				value = 1
			}
			country_event = {
				id = keep_leaders.1
				scopes = {
					from = ROOT
				}
			}
		}
	}
}

# keep robotic only
country_event = {
	id = keep_leaders.3
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		save_event_target_as = root_country
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_class_for_transfer_leader = yes
					OR = {
						is_robotic_species = yes
						AND = {
							is_cyborg_leader = yes
							event_target:root_country = { empire_considers_cyborgs_machines = yes }
						}
					}
				}
				if = {
					limit = {
						OR = {
							event_target:root_country = {
								NAND = {
									has_origin = origin_necrophage
									has_trait = trait_necrophage
								}
							}
							AND = {
								is_military_leader = yes
								species = { has_species_flag = allow_military_leaders_for_necrophage }
							}
						}
						OR = {
							event_target:root_country = { is_xenophobe = no }
							AND = {
								is_military_leader = yes
								species = { has_species_flag = allow_military_leaders_for_xenophobe }
							}
						}
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
			}
		}
	}
}

# keep organic only
country_event = {
	id = keep_leaders.4
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		save_event_target_as = root_country
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_class_for_transfer_leader = yes
					is_robotic_species = no
				}
				if = {
					limit = {
						OR = {
							event_target:root_country = {
								NAND = {
									has_origin = origin_necrophage
									has_trait = trait_necrophage
								}
							}
							AND = {
								is_military_leader = yes
								species = { has_species_flag = allow_military_leaders_for_necrophage }
							}
						}
						OR = {
							event_target:root_country = { is_xenophobe = no }
							AND = {
								is_military_leader = yes
								species = { has_species_flag = allow_military_leaders_for_xenophobe }
							}
						}
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
			}
		}
	}
}

# keep same species only
country_event = {
	id = keep_leaders.5
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		save_event_target_as = root_country
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_class_for_transfer_leader = yes
					is_same_species = event_target:root_country
				}
				ensure_species_rights_and_take_ownership_of_leader = yes
			}
		}
	}
}

# keep hive only
country_event = {
	id = keep_leaders.6
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_regular_hive_empire = yes
	}
	immediate = {
		save_event_target_as = root_country
		FROM = {
			every_owned_leader = {
				limit = {
					is_eligible_class_for_transfer_leader = yes
					is_hive_species = yes
				}
				ensure_species_rights_and_take_ownership_of_leader = yes
			}
		}
	}
}

# keep 'em all!
country_event = {
	id = keep_leaders.7
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		is_regular_empire = yes
	}
	immediate = {
		save_event_target_as = root_country
		FROM = {
			every_owned_leader = {
				limit = { is_eligible_class_for_transfer_leader = yes }
				if = {
					limit = {
						OR = {
							is_same_species = event_target:root_country
							AND = {
								OR = {
									is_robotic_species = no
									event_target:root_country = { has_full_ai_rights = yes }
								}
								OR = {
									event_target:root_country = {
										NAND = {
											has_origin = origin_necrophage
											has_trait = trait_necrophage
										}
									}
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_necrophage }
									}
								}
								OR = {
									event_target:root_country = { is_xenophobe = no }
									AND = {
										is_military_leader = yes
										species = { has_species_flag = allow_military_leaders_for_xenophobe }
									}
								}
							}
						}
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
			}
		}
	}
}

# assimilate
country_event = {
	id = keep_leaders.8
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		save_event_target_as = root_country
		set_update_modifiers_batch = begin
		FROM = {
			every_owned_leader = {
				limit = { is_eligible_class_for_transfer_leader = yes }
				if = {
					limit = {
						event_target:root_country = {
							is_xenophobe = no
							NAND = {
								has_origin = origin_necrophage
								has_trait = trait_necrophage
							}
							has_full_ai_rights = yes
						}
						is_robotic_species = yes
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
				if  = {
					limit = { event_target:root_country = { has_valid_civic = civic_machine_assimilator } }
					if = {
						limit = { is_eligible_for_machine_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:root_country
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:root_country
							type = living_standard_ego_assimilation
						}
						modify_species = {
							species = species
							add_trait = trait_cybernetic
							add_traits_at_start_of_list = yes
							change_scoped_species = no
							effect = {
								save_event_target_as = cyborg_species
							}
						}
						if = {
							limit = { event_target:cyborg_species = { has_trait = trait_hive_mind } }
							modify_species = {
								species = event_target:cyborg_species
								remove_trait = trait_hive_mind
								change_scoped_species = no
								effect = {
									save_event_target_as = cyborg_species
								}
							}
						}
						change_species = event_target:cyborg_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						add_static_applicable_leader_species_traits = yes
						remove_all_inapplicable_leader_species_traits = yes
					}
				}
				else_if = {
					limit = {
						event_target:root_country = {
							is_regular_hive_empire = yes
							has_ascension_perk = ap_engineered_evolution
						}
					}
					if = {
						limit = { is_eligible_for_hive_assimilation_species = yes }
						set_citizenship_type = {
							country = event_target:root_country
							type = citizenship_assimilation
						}
						set_living_standard = {
							country = event_target:root_country
							type = living_standard_ego_assimilation
						}
						modify_species = {
							species = species
							add_trait = trait_hive_mind
							add_traits_at_start_of_list = yes
							change_scoped_species = no
							effect = {
								save_event_target_as = hived_species
							}
						}
						if = {
							limit = { has_trait = trait_self_modified }
							modify_species = {
								species = event_target:hived_species
								remove_trait = trait_self_modified
								change_scoped_species = no
								effect = {
									save_event_target_as = hived_species
								}
							}
						}
						change_species = event_target:hived_species
						ensure_species_rights_and_take_ownership_of_leader = yes
						add_static_applicable_leader_species_traits = yes
						remove_all_inapplicable_leader_species_traits = yes
					}
				}
				else_if = {
					limit = {
						event_target:root_country = {
							is_regular_empire = yes
							OR = {
								is_same_species = PREV
								is_xenophobe = no
								NAND = {
									has_origin = origin_necrophage
									has_trait = trait_necrophage
								}
							}
						}
					}
					if = {
						limit = {
							event_target:root_country = {
								has_ascension_perk = ap_synthetic_evolution
								has_country_flag = synthetic_empire
							}
						}
						if = {
							limit = { is_eligible_for_synthetic_assimilation_species = yes }
							set_citizenship_type = {
								country = event_target:root_country
								type = citizenship_assimilation
							}
							set_living_standard = {
								country = event_target:root_country
								type = living_standard_tech_assimilation
							}
							# if you convert them to synths, you lose the secret hive magic
							if = {
								limit = { has_leader_flag = former_gestalt_ruler }
								remove_leader_flag = former_gestalt_ruler
							}
							change_species = event_target:root_country.owner_species
							change_leader_portrait = event_target:root_country.owner_species
							unassign_leader = THIS
							set_owner = event_target:event_target:root_country_country
							add_static_applicable_leader_species_traits = yes
							remove_all_inapplicable_leader_species_traits = yes
						}
					}
					else_if = {
						limit = {
							event_target:root_country = {
								has_ascension_perk = ap_the_flesh_is_weak
								has_country_flag = flesh_weakened
							}
						}
						if = {
							limit = { is_eligible_for_cybernetic_assimilation_species = yes }
							set_citizenship_type = {
								country = event_target:root_country
								type = citizenship_assimilation
							}
							set_living_standard = {
								country = event_target:root_country
								type = living_standard_tech_assimilation
							}
							modify_species = {
								species = species
								add_trait = trait_hive_mind
								add_traits_at_start_of_list = yes
								change_scoped_species = no
								effect = {
									save_event_target_as = cyborg_species
								}
							}
							change_species = event_target:cyborg_species
							ensure_species_rights_and_take_ownership_of_leader = yes
							add_static_applicable_leader_species_traits = yes
							remove_all_inapplicable_leader_species_traits = yes
						}
					}
					else_if = {
						limit = { event_target:root_country = { has_ascension_perk = ap_transcendence } }
						if = {
							limit = { is_eligible_for_psionic_assimilation_species = yes }
							set_citizenship_type = {
								country = event_target:root_country
								type = citizenship_assimilation
							}
							set_living_standard = {
								country = event_target:root_country
								type = living_standard_psi_assimilation
							}
							modify_species = {
								species = species
								add_trait = trait_psionic
								add_traits_at_start_of_list = yes
								change_scoped_species = no
								effect = {
									save_event_target_as = psionic_species
								}
							}
							if = {
								limit = { event_target:psionic_species = { has_trait = trait_latent_psionic } }
								modify_species = {
									species = event_target:psionic_species
									remove_trait = trait_latent_psionic
									change_scoped_species = no
									effect = {
										save_event_target_as = psionic_species
									}
								}
							}
							change_species = event_target:psionic_species
							ensure_species_rights_and_take_ownership_of_leader = yes
							add_static_applicable_leader_species_traits = yes
							remove_all_inapplicable_leader_species_traits = yes
						}
					}
					else_if = {
						limit = { event_target:root_country = { has_ascension_perk = ap_evolutionary_mastery } }
						if = {
							limit = { is_eligible_for_unhive_assimilation_species = yes }
							set_citizenship_type = {
								country = event_target:root_country
								type = citizenship_assimilation
							}
							set_living_standard = {
								country = event_target:root_country
								type = living_standard_deassimilation
							}
							modify_species = {
								species = species
								remove_trait = trait_hive_mind
								change_scoped_species = no
								effect = {
									save_event_target_as = unhived_species
								}
							}
							change_species = event_target:unhived_species
							ensure_species_rights_and_take_ownership_of_leader = yes
							add_static_applicable_leader_species_traits = yes
							remove_all_inapplicable_leader_species_traits = yes
						}
					}
				}
			}
		}
		set_update_modifiers_batch = end
	}
}

# necrophage
country_event = {
	id = keep_leaders.9
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		has_origin = origin_necrophage
		has_trait = trait_necrophage
	}
	immediate = {
		save_event_target_as = root_country
		FROM = {
			every_owned_leader = {
				limit = { is_eligible_class_for_transfer_leader = yes }
				if = {
					limit = { is_robotic_species = no }
					if = {
						limit = { has_ruler_trait = leader_trait_ruler_hive_mind }
						remove_ruler_trait = leader_trait_ruler_hive_mind
					}
					if = {
						limit = {
							OR = {
								has_trait = trait_hive_mind
								event_target:root_country = {
									OR = {
										has_valid_civic = civic_fanatic_purifiers
										has_policy_flag = purge_allowed
									}
								}
							}
							NAND = {
								has_citizenship_type = { type = citizenship_purge }
								has_living_standard = { type = living_standard_none }
								has_purge_type = { type = purge_necrophage }
							}
						}
						set_citizenship_type = {
							country = THIS
							type = citizenship_purge
							cooldown = no
						}
						set_living_standard = {
							country = THIS
							type = living_standard_none
							cooldown = no
						}
						set_purge_type = {
							country = event_target:root_country
							type = purge_necrophage
							cooldown = no
						}
					}
					# if you necrophage them, you lose the secret hive magic
					if = {
						limit = { has_leader_flag = former_gestalt_ruler }
						remove_leader_flag = former_gestalt_ruler
					}
					change_species = event_target:root_country
					change_leader_portrait = event_target:root_country
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
				else_if = {
					limit = {
						is_robotic_species = yes
						event_target:root_country = { has_full_ai_rights = yes }
						is_military_leader = yes
						species = {
							has_species_flag = allow_military_leaders_for_necrophage
							OR = {
								PREV = { is_xenophobe = no }
								has_species_flag = allow_military_leaders_for_xenophobe
							}
						}

					}
					if = {
						limit = { has_ruler_trait = leader_trait_ruler_machine_intelligence }
						remove_ruler_trait = leader_trait_ruler_machine_intelligence
					}
					ensure_species_rights_and_take_ownership_of_leader = yes
				}
			}
		}
	}
}

# THIS = country
# FROM = leader
# triggered by on_leader_death
country_event = {
	id = keep_leaders.100
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FROM
		FROM = { has_leader_flag = former_gestalt_ruler }
		any_owned_pop_species = {
			is_same_species = FROM
		}
	}
	immediate = {
		clone_leader = {
			target = FROM
			effect = {
				save_event_target_as = exiled_former_gestalt_ruler
				exile_leader_as = exiled_former_gestalt_ruler@THIS
			}
		}
		country_event = {
			id = keep_leaders.101
			scopes = {
				from = event_target:exiled_former_gestalt_ruler
			}
			days = 30
			random = 60
		}
	}
}

# THIS = country
# FROM = the exiled leader
# the "dead" gestalt leader re-emerges 1-3 months after keep_leaders.100
country_event = {
	id = keep_leaders.101
	is_triggered_only = yes
	title = keep_leaders.101.title
	desc = keep_leaders.101.desc
	picture = {
		trigger = {
			FROM = { is_hive_species = yes }
		}
		picture = GFX_evt_hive_mind
	}
	picture = {
		trigger = {
			FROM = { is_robotic_species = yes }
		}
		picture = GFX_evt_machine_sapience
	}
	show_sound = {
		trigger = {
			FROM = { is_hive_species = yes }
		}
		sound = event_evolution_mastery
	}
	show_sound = {
		trigger = {
			FROM = { is_robotic_species = yes }
		}
		sound = event_synthetic_evolution
	}
	trigger = {
		exists = FROM
		FROM = { has_leader_flag = former_gestalt_ruler }
		any_owned_pop_species = {
			is_same_species = FROM
		}
	}
	option = {
		name = INCREDIBLE
		hidden_effect = {
			set_leader = exiled_former_gestalt_ruler@FROM
		}
	}
}