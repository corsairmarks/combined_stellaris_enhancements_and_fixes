namespace = start_with_unity_fund

# triggered by on_game_start
event = {
	id = start_with_unity_fund.1
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		every_playable_country = {
			set_variable = {
				which = starting_unity_fund
				value = 10 # base amount, defined: common/static_modifiers/00_static_modifiers.txt at line 15 (empire_base)
			}
			if = {
				limit = { exists = ruler }
				set_variable = {
					which = starting_ruler_level
					value = ruler.trigger:has_skill
				}
				multiply_variable = {
					which = starting_ruler_level
					value = 5 # per ruler level, defined: common/static_modifiers/00_static_modifiers.txt at line 1122 (skill_ruler)
				}
				change_variable = {
					which = starting_unity_fund
					value = starting_ruler_level
				}
				clear_variable = starting_ruler_level
				if = {
					limit = {
						ruler = {
							OR = {
								has_ruler_trait = trait_ruler_charismatic
								has_trait = trait_ruler_charismatic
							}
						}
					}
					change_variable = {
						which = starting_unity_fund
						value = 20 # civic, defined: common/traits/00_ruler_traits.txt at line 277 (trait_ruler_charismatic)
					}
				}
			}
			if = {
				limit = { has_valid_civic = civic_machine_ota_updates }
				change_variable = {
					which = starting_unity_fund
					value = 25 # civic, defined: common/governments/civics/02_gestalt_civics.txt at line 576 (civic_machine_ota_updates)
				}
			}
			if = {
				limit = { has_valid_civic = civic_hive_subsumed_will }
				change_variable = {
					which = starting_unity_fund
					value = 25 # civic, defined: common/governments/civics/02_gestalt_civics.txt at line 121 (civic_hive_subsumed_will)
				}
			}
			if = {
				limit = { has_valid_civic = civic_brand_loyalty }
				change_variable = {
					which = starting_unity_fund
					value = 25 # civic, defined: common/governments/civics/03_corporate_civics.txt at line 245 (civic_brand_loyalty)
				}
			}
			if = {
				limit = { has_valid_civic = civic_imperial_cult }
				change_variable = {
					which = starting_unity_fund
					value = 100 # civic, defined: common/governments/civics/00_civics.txt at line 81 (civic_imperial_cult)
				}
			}
			if = {
				limit = { has_valid_civic = civic_inwards_perfection }
				change_variable = {
					which = starting_unity_fund
					value = 50 # civic, defined: common/governments/civics/00_civics.txt at line 691 (civic_inwards_perfection)
				}
			}
			if = {
				limit = { has_valid_civic = civic_efficient_bureaucracy }
				# civic grants 2 edicts fund per bureaucrat/priest/death priest/manager, scaled with unity modifiers (see job definitions)
				# and also see common/script_values/00_script_values.txt at line 499
				capital_scope = {
					every_owned_pop = {
						limit = {
							OR = {
								has_job = bureaucrat
								has_job = priest
								has_job = death_priest
								has_job = manager
							}
						}
						set_variable = {
							which = base_edicts_fund_per_job
							value = 2
						}
						if = {
							limit = { has_job = bureaucrat }
							multiply_variable = {
								which = base_edicts_fund_per_job
								value = value:job_total_output_modifier|JOB|bureaucrat|RESOURCE|unity|
							}
							prevprev = {
								change_variable = {
									which = starting_unity_fund
									value = prev.base_edicts_fund_per_job
								}
							}
						}
						else_if = {
							limit = { has_job = priest }
							multiply_variable = {
								which = base_edicts_fund_per_job
								value = value:job_total_output_modifier|JOB|priest|RESOURCE|unity|
							}
							set_variable = {
								which = temp_p
								value = value:job_total_output_modifier|JOB|priest|RESOURCE|unity|
							}
							prevprev = {
								change_variable = {
									which = starting_unity_fund
									value = prev.base_edicts_fund_per_job
								}
							}
						}
						else_if = {
							limit = { has_job = death_priest }
							multiply_variable = {
								which = base_edicts_fund_per_job
								value = value:job_total_output_modifier|JOB|death_priest|RESOURCE|unity|
							}
							prevprev = {
								change_variable = {
									which = starting_unity_fund
									value = prev.base_edicts_fund_per_job
								}
							}
						}
						else_if = {
							limit = { has_job = manager }
							multiply_variable = {
								which = base_edicts_fund_per_job
								value = value:job_total_output_modifier|JOB|manager|RESOURCE|unity|
							}
							prevprev = {
								change_variable = {
									which = starting_unity_fund
									value = prev.base_edicts_fund_per_job
								}
							}
						}
						else_if = {
							limit = { has_job = unifier }
							multiply_variable = {
								which = base_edicts_fund_per_job
								value = value:job_total_output_modifier|JOB|unifier|RESOURCE|unity|
							}
							prevprev = {
								change_variable = {
									which = starting_unity_fund
									value = prev.base_edicts_fund_per_job
								}
							}
						}
						clear_variable = base_edicts_fund_per_job
					}
				}
			}
			# authoritarians have culture workers/death chroniclers generate edicts fund, defined: common/inline_scripts/jobs/culture_worker_outputs.txtat line 47
			# and also see common/script_values/00_script_values.txt at line 1069
			if = {
				limit = { is_authoritarian = yes }
				set_variable = {
					which = edicts_fund_per_job
					value = 3 # civic grants 3 edicts fund per culture worker/death chronicler
				}
				if = {
					limit = { has_ethic = ethic_fanatic_authoritarian }
					multiply_variable = {
						which = edicts_fund_per_job
						value = 2
					}
				}
				# culture worker
				set_variable = {
					which = temp_num_assigned_jobs
					value = 0
				}
				export_trigger_value_to_variable = {
					trigger = num_assigned_jobs
					variable = temp_num_assigned_jobs
					parameters = {
						job = culture_worker
					}
				}
				multiply_variable = {
					which = temp_num_assigned_jobs
					value = edicts_fund_per_job
				}
				change_variable = {
					which = starting_unity_fund
					value = temp_num_assigned_jobs
				}
				# death chronicler
				set_variable = {
					which = temp_num_assigned_jobs
					value = 0
				}
				export_trigger_value_to_variable = {
					trigger = num_assigned_jobs
					variable = temp_num_assigned_jobs
					parameters = {
						job = death_chronicler
					}
				}
				multiply_variable = {
					which = temp_num_assigned_jobs
					value = edicts_fund_per_job
				}
				change_variable = {
					which = starting_unity_fund
					value = temp_num_assigned_jobs
				}
				clear_variable = edicts_fund_per_job
				clear_variable = temp_num_assigned_jobs
			}
			add_resource = {
				unity = 1
				mult = starting_unity_fund
			}
			clear_variable = starting_unity_fund
		}
	}
}