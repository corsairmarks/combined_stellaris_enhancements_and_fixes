# RANDOM NUMBER GENERATOR

# Source: https://forum.paradoxplaza.com/forum/threads/mod-rng-random-number-generator-for-modders.1114845/
# Written by emanueru_95
# Modified for Stellaris by corsairmarks

#############################################################
# Generates a random number between 0.000 and 1.000			#
# Generated percent is saved in variable "rng_percent".		#
#############################################################

random_number_generator_percent_effect = {
	# Initialize variable rng_percent.
	set_variable = {
		which = rng_percent
		value = 0
	}
	random_list = {
		# Chance of rng_percent being EQUAL to 100.0%.
		1 = {
			set_variable = {
				which = rng_percent
				value = 1
			}
		}
		# Chance of rng_percent being LESS than 100.0%.
		1000 = {
			while = { 
				count = 3
				limit = {					#
					check_variable = {		#
						which = rng_percent	#	Dummy limit
						value = 0			#	it doesn't do anything.
					}						#
				}
				random_list = {
					1 = {
						change_variable = {
							which = rng_percent
							value = 0
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 1
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 2
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 3
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 4
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 5
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 6
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 7
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 8
						}
					}
					1 = {
						change_variable = {
							which = rng_percent
							value = 9
						}
					}
				}
				divide_variable = {
					which = rng_percent
					value = 10
				}
			}
		}
	}
}

#####################################################################################################################
# Generates a random number between "rng_min" and "rng_max" with an optional specified number of decimal places		#
# in "rng_places". Default is no rounding.																			#
# Generated number is saved in variable "rng_number".																#
# Variables "rng_max", "rng_min", "rng_places" and "rng_percent" are cleared at the end of this effect.				#
# Needs at least "rng_max" OR "rng_min" variable to work properly.													#
#####################################################################################################################

# Generate random number between "rng_min" and "rng_max".
random_number_generator_effect = {
	if = {
		limit = {
			OR = {
				is_variable_set = rng_min
				is_variable_set = rng_max
			}
		}
		if = {
			limit = {
				NOT = { is_variable_set = rng_min }
				is_variable_set = rng_max
			}
			set_variable = {
				which = rng_min
				value = 0
			}
		}
		else_if = {
			limit = {
				is_variable_set = rng_min
				NOT = { is_variable_set = rng_max }
			}
			set_variable = {
				which = rng_max
				value = 0
			}
		}
		subtract_variable = {
			which = rng_max
			value = rng_min
		}
		random_number_generator_percent_effect = yes
		multiply_variable = {
			which = rng_percent
			value = rng_max
		}
		set_variable = {
			which = rng_number
			value = rng_percent
		}
		change_variable = {
			which = rng_number
			value = rng_min
		}
		# Round generated number to specified number of places.
		if = {
			limit = {
				is_variable_set = rng_places
				NOT = {
					check_variable = {
						which = rng_number
						value = 0
					}
				}
			}
			if = {
				limit = {
					check_variable = {
						which = rng_places
						value = 0
					}
				}
				round_variable = rng_number
			}
			else_if = {
				limit = {
					check_variable = {
						which = rng_places
						value = 1
					}
				}
				if = {
					limit = {
						check_variable = {
							which = rng_number
							value > 0
						}
					}
					change_variable = {
						which = rng_number
						value = 0.05
					}
				}
				else = {
					change_variable = {
						which = rng_number
						value = -0.05
					}
				}
				divide_variable = {
					which = rng_number
					value = 10000
				}
				multiply_variable = {
					which = rng_number
					value = 10000
				}
			}
			else_if = {
				limit = {
					check_variable = {
						which = rng_places
						value = 2
					}
				}
				if = {
					limit = {
						check_variable = {
							which = rng_number
							value > 0
						}
					}
					change_variable = {
						which = rng_number
						value = 0.005
					}
				}
				else = {
					change_variable = {
						which = rng_number
						value = -0.005
					}
				}
				divide_variable = {
					which = rng_number
					value = 1000
				}
				multiply_variable = {
					which = rng_number
					value = 1000
				}
			}
			else_if = {
				limit = {
					check_variable = {
						which = rng_places
						value = 3
					}
				}
				if = {
					limit = {
						check_variable = {
							which = rng_number
							value > 0
						}
					}
					change_variable = {
						which = rng_number
						value = 0.0005
					}
				}
				else = {
					change_variable = {
						which = rng_number
						value = -0.0005
					}
				}
				divide_variable = {
					which = rng_number
					value = 100
				}
				multiply_variable = {
					which = rng_number
					value = 100
				}
			}
			else_if = {
				limit = {
					check_variable = {
						which = rng_places
						value = 4
					}
				}
				if = {
					limit = {
						check_variable = {
							which = rng_number
							value > 0
						}
					}
					change_variable = {
						which = rng_number
						value = 0.00005
					}
				}
				else = {
					change_variable = {
						which = rng_number
						value = -0.00005
					}
				}
				divide_variable = {
					which = rng_number
					value = 10
				}
				multiply_variable = {
					which = rng_number
					value = 10
				}
			}
			# 5 places is default for Stellaris.
			clear_variable = rng_places
		}
		# Clear the rest of the variables.
		clear_variable = rng_max
		clear_variable = rng_min
		clear_variable = rng_percent
	}
	else = {
		log_error = "rng_number_effect did not have at least one of its required variables set: rng_max, rng_min"
	}
}