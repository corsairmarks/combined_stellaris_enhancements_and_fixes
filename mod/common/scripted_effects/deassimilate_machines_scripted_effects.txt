# this = species (target)
# prev = species (current)
# prevprev = country (assimilator)
dm_set_assimilation_flags = {
	optimize_memory
	set_timed_species_flag = {
		flag = assimilation_species_of_species@prev
		days = 30
	}
	set_timed_species_flag = {
		flag = assimilation_species_of_empire@prevprev
		days = 30
	}
	set_timed_species_flag = {
		flag = unmachine_species_of_empire@prevprev
		days = 30
	}
}

# set up a machine species for deassimilation into a mechanical species, saved as event_target:prepared_species
# this = species
# prev = country (assimilator)
dm_prepare_machine_to_mechanical_species = {
	optimize_memory
	save_event_target_as = machine_species
	random_galaxy_species = {
		limit = { has_species_flag = mechanical_species_of_machine_species@event_target:machine_species }
		prevprev = { set_country_flag = found_assim_mech_species@event_target:machine_species }
		save_event_target_as = prepared_species
	}
	if = {
		limit = { prev = { NOT = { has_country_flag = found_assim_mech_species@event_target:machine_species } } }
		event_target:machine_species = {
			create_species = {
				name = this
				plural = this
				adjective = this
				name_list = this
				class = ROBOT
				portrait = this
				homeworld = this
				traits = this
				effect = {
					save_event_target_as = mechanical_species
				}
			}
		}
		swap_species_traits_machine_to_robotic = yes
		modify_species = {
			base = event_target:machine_species
			species = event_target:mechanical_species
			add_traits_at_start_of_list = yes
			remove_trait = trait_machine_unit
			add_trait = trait_mechanical
			change_scoped_species = no
			effect = {
				set_species_flag = mechanical_species_of_machine_species@event_target:machine_species
				save_event_target_as = prepared_species
			}
		}
	}
	else = {
		# setup for next loop iteration
		prev = { remove_country_flag = found_assim_mech_species@event_target:machine_species }
	}
}

# this = species, the (original) species to inspect for traits to convert to robotic traits as event_target:mechanical_species
# event_target:mechanical_species = used as the base species to be modified, will be overwritten with the new species if one or more traits had to be swapped
swap_species_traits_machine_to_robotic = {
	optimize_memory
	if = {
		limit = { has_trait = trait_robot_emotion_emulators }
		modify_species = {
			species = event_target:mechanical_species
			add_trait = trait_robot_domestic_protocols
			remove_trait = trait_robot_emotion_emulators
			change_scoped_species = no
			effect = {
				save_event_target_as = mechanical_species
			}
		}
	}
	if = {
		limit = { has_trait = trait_robot_uncanny }
		modify_species = {
			species = event_target:mechanical_species
			remove_trait = trait_robot_uncanny
			change_scoped_species = no
			effect = {
				save_event_target_as = mechanical_species
			}
		}
	}
}