# this = country
is_devouring_hive_empire = {
	optimize_memory
	is_hive_empire = yes
	has_valid_civic = civic_hive_devouring_swarm
}

# this = country
is_regular_hive_empire = {
	optimize_memory
	is_hive_empire = yes
	NOT = { has_valid_civic = civic_hive_devouring_swarm }
}

# this = country
klfis_is_necrophage_empire = {
	optimize_memory
	has_origin = origin_necrophage
	has_trait = trait_necrophage
}

# this = country
empire_considers_cyborgs_robotic = {
	optimize_memory
	has_valid_civic = civic_machine_assimilator
}

# this = country
has_full_ai_rights = {
	optimize_memory
	OR = {
		is_robot_empire = yes
		AND = {
			has_policy_flag = robots_allowed
			has_policy_flag = ai_full_rights
		}
	}
}

# this = country
allows_ai_leaders = {
	optimize_memory
	OR = {
		is_robot_empire = yes
		NOT = { has_policy_flag = ai_outlawed }
	}
	is_valid_organic_zealots = no
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country to which the leader would transfer
can_be_civilian_leaders_species = {
	optimize_memory
	species = {
		OR = {
			has_citizenship_type = {
				country = event_target:potential_owner
				type = citizenship_full
			}
			has_citizenship_type = {
				country = event_target:potential_owner
				type = citizenship_full_machine
			}
		}
	}
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country to which the leader would transfer
can_be_military_leaders_species = {
	optimize_memory
	species = {
		has_military_service_type = {
			country = event_target:potential_owner
			type = military_service_full
		}
	}
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country to which the leader would transfer
is_eligible_for_policy_full_citizenship_species = {
	optimize_memory
	OR = {
		species = { is_same_species = event_target:potential_owner }
		if = {
			limit = { event_target:potential_owner = { is_machine_empire = yes } }
			is_robotic_species_lenient = yes
		}
		else_if = {
			limit = { event_target:potential_owner = { is_regular_hive_empire = yes } }
			OR = {
				is_hive_species = yes
				event_target:potential_owner = { has_active_tradition = tr_genetics_creation }
			}
		}
		else_if = {
			limit = { event_target:potential_owner = { is_regular_empire = yes } }
			event_target:potential_owner = {
				NOT = { has_valid_civic = civic_fanatic_purifiers }
				is_xenophobe = no
				klfis_is_necrophage_empire = no
			}
			is_smart_enough_for_leadership_species = yes
			is_hive_species = no
			OR = {
				is_robotic_species = no
				AND = {
					is_mechanical_species = yes
					event_target:potential_owner = { has_full_ai_rights = yes }
				}
			}
		}
		else = {
			always = no
		}
	}
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country to which the leader would transfer
is_eligible_for_policy_full_military_service_species = {
	optimize_memory
	OR = {
		species = { is_same_species = event_target:potential_owner }
		if = {
			limit = { event_target:potential_owner = { is_machine_empire = yes } }
			is_robotic_species_lenient = yes
		}
		else_if = {
			limit = { event_target:potential_owner = { is_regular_hive_empire = yes } }
			OR = {
				is_hive_species = yes
				event_target:potential_owner = { has_active_tradition = tr_genetics_creation }
			}
		}
		else_if = {
			limit = { event_target:potential_owner = { is_regular_empire = yes } }
			event_target:potential_owner = {
				NOT = { has_valid_civic = civic_fanatic_purifiers }
				OR = {
					AND = {
						is_xenophobe = no
						klfis_is_necrophage_empire = no
					}
					species = { has_species_flag = allow_military_leaders_honored_protectors@event_target:potential_owner }
				}
			}
			is_smart_enough_for_leadership_species = yes
			OR = {
				is_robotic_species = no
				AND = {
					is_mechanical_species = yes
					event_target:potential_owner = { has_full_ai_rights = yes }
				}
			}
		}
		else = {
			always = no
		}
	}
}

# could this species potentially be made machine? (robotic, non-primary)
# this = something with a species (country, leader, pop, etc)
is_potential_for_machine_synthetic_assimilation_species = {
	optimize_memory
	is_robotic_species = yes
	species = { NOT = { is_same_species = event_target:potential_owner } }
}

# this = country
is_potential_for_synthetic_assimilation_country = {
	optimize_memory
	OR = {
		has_active_tradition = tr_synthetics_adopt_machine
		has_country_flag = synth_assimilation
	}
}

# could this species potentially be made hive and/or cybernetic? (non-robotic, non-cyborg or non-hive)
# this = something with a species (country, leader, pop, etc)
is_potential_for_hive_cyborg_assimilation_species = {
	optimize_memory
	is_robotic_species = no
	NAND = {
		is_cyborg_species = yes
		is_hive_species = yes
	}
}

# could this species potentially be made cybernetic and/or non-hive? (non-robotic, non-cyborg, cyborg hive with tradition)
# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country to which the leader would transfer
is_potential_for_machine_cyborg_assimilation_species = {
	optimize_memory
	is_robotic_species = no
	OR = {
		AND = {
			is_cyborg_species = no
			is_hive_species = no
		}
		AND = {
			event_target:potential_owner = { has_active_tradition = tr_cybernetics_assimilator_inevitable_assimilation }
			is_hive_species = yes
		}
	}
}

# could this species potentially be hived? (non-robotic, non-hive)
# this = something with a species (country, leader, pop, etc)
is_potential_for_hive_assimilation_species = {
	optimize_memory
	is_robotic_species = no
	is_hive_species = no
}

# this = country
is_potential_for_genetic_assimilation_country = {
	optimize_memory
	has_active_tradition = tr_genetics_creation
}

# could this species potentially be converted from a machine to a robot? (machine)
# this = something with a species (country, leader, pop, etc)
is_potential_for_unmachine_assimilation_species = {
	optimize_memory
	is_machine_species = yes
}

# this = country
is_potential_for_unmachine_assimilation_country = {
	optimize_memory
	is_regular_empire = yes
	has_technology = tech_sapient_ai
}

# could this species potentially be unhived? (hive)
# this = something with a species (country, leader, pop, etc)
is_potential_for_unhive_assimilation_species = {
	optimize_memory
	is_hive_species = yes
}

# could this species potentially be made synthetic? (non-hive)
# this = something with a species (country, leader, pop, etc)
is_potential_for_regular_synthetic_assimilation_species = {
	optimize_memory
	is_hive_species = no
	species = { NOT = { is_same_species = event_target:potential_owner } }
}

# could this species potentially be made cybernetic? (non-robotic, non-cyborg)
# this = something with a species (country, leader, pop, etc)
is_potential_for_regular_cyborg_assimilation_species = {
	optimize_memory
	is_robotic_species = no
	is_cyborg_species = no
}

# this = country
is_potential_for_cyborg_assimilation_country = {
	optimize_memory
	OR = {
		has_civic = civic_machine_assimilator
		has_active_tradition = tr_cybernetics_transubstantiation_synthesis
	}
}

# could this species potentially have cybernetics removed? (non-robotic, non-cyborg)
# this = something with a species (country, leader, pop, etc)
is_potential_for_uncyborg_assimilation_species = {
	optimize_memory
	is_cyborg_species = yes
	is_hive_species = no
}

# this = country
is_potential_for_uncyborg_assimilation_country = {
	optimize_memory
	is_regular_empire = yes
	has_technology = tech_gene_tailoring
	has_technology = tech_gene_banks
}

# could this species potentially be made psionic? (non-robotic, non-psionic, non-hive)
# this = something with a species (country, leader, pop, etc)
is_potential_for_psionic_assimilation_species = {
	optimize_memory
	is_robotic_species = no
	is_psionic_species = no
	is_hive_species = no
}

# this = country
is_potential_for_psionic_assimilation_country = {
	optimize_memory
	has_tradition = tr_psionics_psionic_assimilation
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country
is_potential_for_cyborg_assimilation = {
	optimize_memory
	event_target:potential_owner = { is_potential_for_cyborg_assimilation_country = yes }
	OR = {
		AND = {
			event_target:potential_owner = { has_valid_civic = civic_machine_assimilator }
			is_potential_for_machine_cyborg_assimilation_species = yes
		}
		AND = {
			event_target:potential_owner = { is_regular_hive_empire = yes }
			is_potential_for_hive_cyborg_assimilation_species = yes
		}
		AND = {
			event_target:potential_owner = { is_regular_empire = yes }
			is_potential_for_regular_cyborg_assimilation_species = yes
		}
	}
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country
is_potential_for_synthetic_assimilation = {
	optimize_memory
	event_target:potential_owner = { is_potential_for_synthetic_assimilation_country = yes }
	OR = {
		AND = {
			event_target:potential_owner = { is_machine_empire = yes }
			is_potential_for_machine_synthetic_assimilation_species = yes
		}
		AND = {
			event_target:potential_owner = { is_regular_empire = yes }
			is_potential_for_regular_synthetic_assimilation_species = yes
		}
	}
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country
is_potential_for_unmachine_assimilation = {
	optimize_memory
	has_deassimilate_machines_active = yes
	event_target:potential_owner = { is_potential_for_unmachine_assimilation_country = yes }
	is_potential_for_unmachine_assimilation_species = yes
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country
is_potential_for_uncyborg_assimilation = {
	optimize_memory
	event_target:potential_owner = { is_potential_for_uncyborg_assimilation_country = yes }
	is_potential_for_uncyborg_assimilation_species = yes
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country
is_potential_for_psionic_assimilation = {
	optimize_memory
	event_target:potential_owner = { is_potential_for_psionic_assimilation_country = yes }
	is_potential_for_psionic_assimilation_species = yes
}

# this = something with a species (country, leader, pop, etc)
# event_target:potential_owner = country
is_potential_for_genetic_assimilation = {
	optimize_memory
	event_target:potential_owner = { is_potential_for_genetic_assimilation_country = yes }
	OR = {
		AND = {
			event_target:potential_owner = { is_hive_empire = yes }
			is_potential_for_hive_assimilation_species = yes
		}
		AND = {
			event_target:potential_owner = { is_regular_empire = yes }
			is_potential_for_unhive_assimilation_species = yes
		}
	}
}

# this = something with a species (country, leader, pop, etc)
is_latent_psionic_species = {
	optimize_memory
	species = { has_trait = trait_latent_psionic }
}

# this = something with a species (country, leader, pop, etc)
is_psionic_species = {
	optimize_memory
	species = { has_trait = trait_psionic }
}

# this = something with a species (country, leader, pop, etc)
is_cyborg_species = {
	optimize_memory
	species = { has_trait = trait_cybernetic }
}

# this = something with a species (country, leader, pop, etc)
is_machine_species = {
	optimize_memory
	species = {
		OR = {
			has_trait = trait_machine_unit
			is_archetype = MACHINE
		}
	}
}

# this = something with a species (country, leader, pop, etc)
is_mechanical_species = {
	optimize_memory
	species = {
		OR = {
			has_trait = trait_mechanical
			is_archetype = ROBOT
		}
	}
}

# this = something with a species (country, leader, pop, etc)
is_aquatic_species = {
	optimize_memory
	species = { has_trait = trait_aquatic }
}

# this = something with a species (country, leader, pop, etc)
is_non_robotic_non_hive_species = {
	optimize_memory
	is_robotic_species = no
	is_hive_species = no
}

# this = something with a species (country, leader, pop, etc)
is_smart_enough_for_leadership_species = {
	optimize_memory
	species = {
		is_sapient = yes
		NOT = { has_trait = trait_syncretic_proles }
		can_think = yes
	}
}

# this = leader
is_civilian_leader = {
	optimize_memory
	OR = {
		leader_class = governor
		leader_class = scientist
	}
}

# this = leader
is_military_leader = {
	optimize_memory
	OR = {
		leader_class = admiral
		leader_class = general
	}
}

# this = leader
is_cyborg_leader = {
	optimize_memory
	OR = {
		is_cyborg_species = yes
		has_trait = leader_trait_cyborg
	}
}

# this = leader
is_synthetic_leader = {
	optimize_memory
	is_robotic_species = yes
	has_trait = leader_trait_synthetic
}

# whether this leader is allowed transfer without being assimilated
# this = leader
# event_target:potential_owner = country to which the leader would transfer
is_allow_transfer_without_assimilation = {
	optimize_memory
	OR = {
		species = { is_same_species = event_target:potential_owner.owner_species }
		if = {
			limit = { event_target:potential_owner = { is_machine_empire = yes } }
			OR = {
				is_robotic_species_lenient = yes
				AND = {
					has_battle_thrall_military_leaders_active = yes
					event_target:potential_owner = { has_valid_civic = civic_machine_servitor }
					is_hive_species = no
				}
			}
		}
		else_if = {
			limit = { event_target:potential_owner = { is_regular_hive_empire = yes } }
			is_hive_species = yes
		}
		else_if = {
			limit = { event_target:potential_owner = { is_regular_empire = yes } }
			is_hive_species = no
			is_smart_enough_for_leadership_species = yes
			OR = {
				is_robotic_species = no # intentionally allows machine leaders to join non-machines, even if their Pops can't
				event_target:potential_owner = { allows_ai_leaders = yes }
			}
			is_regular_empire_ethics_allowable_leader_species = yes
		}
		else = {
			always = no
		}
	}
}

# whether this leader would be allowed to transfer if assimilated
# this = leader
# event_target:potential_owner = country to which the leader would transfer
is_allow_transfer_with_assimilation = {
	optimize_memory
	NOR = {
		has_leader_flag = renowned_leader
		has_leader_flag = legendary_leader
	}
	if = {
		limit = { event_target:potential_owner = { is_machine_empire = yes } }
		OR = {
			is_potential_for_machine_synthetic_assimilation_species = yes
			AND = {
				event_target:potential_owner = { has_valid_civic = civic_machine_assimilator }
				is_potential_for_machine_cyborg_assimilation_species = yes
			}
		}
	}
	else_if = {
		limit = { event_target:potential_owner = { is_regular_hive_empire = yes } }
		OR = {
			AND = {
				event_target:potential_owner = { has_tradition = tr_genetics_creation }
				is_potential_for_hive_assimilation_species = yes
			}
			AND = {
				event_target:potential_owner = { has_active_tradition = tr_cybernetics_transubstantiation_synthesis }
				is_potential_for_hive_cyborg_assimilation_species = yes
			}
		}
	}
	else_if = {
		limit = { event_target:potential_owner = { is_regular_empire = yes } }
		# eligible for necrophage is not assimilation so it is intentionally omitted here
		OR = {
			AND = {
				event_target:potential_owner = { has_country_flag = synth_assimilation }
				is_potential_for_regular_synthetic_assimilation_species = yes
			}
			AND = {
				event_target:potential_owner = { has_active_tradition = tr_cybernetics_transubstantiation_synthesis }
				is_potential_for_regular_cyborg_assimilation_species = yes
				is_smart_enough_for_leadership_species = yes
				is_regular_empire_ethics_allowable_leader_species = yes
			}
			AND = {
				event_target:potential_owner = { has_active_tradition = tr_psionics_psionic_assimilation }
				is_potential_for_psionic_assimilation_species = yes
				is_smart_enough_for_leadership_species = yes
				is_regular_empire_ethics_allowable_leader_species = yes
			}
			AND = {
				event_target:potential_owner = { has_active_tradition = tr_genetics_creation }
				is_potential_for_unhive_assimilation_species = yes
				is_smart_enough_for_leadership_species = yes
				is_regular_empire_ethics_allowable_leader_species = yes
			}
			AND = {
				has_deassimilate_machines_active = yes
				event_target:potential_owner = {
					has_technology = tech_sapient_ai
					allows_ai_leaders = yes
				}
				is_potential_for_unmachine_assimilation_species = yes
				is_regular_empire_ethics_allowable_leader_species = yes # xenophobe synthetics don't allow other robots
			}
		}
	}
	else = {
		always = no
	}
}

# this = leader
# event_target:potential_owner = country to which the leader would transfer
is_eligible_transfer_leader_from_storage = {
	optimize_memory
	has_leader_flag = potential_owner@event_target:potential_owner
	is_eligible_transfer_leader = yes
}

# this = leader
is_eligible_transfer_leader = {
	optimize_memory
	is_gestalt_node = no
	NOR = {
		leader_class = envoy
		has_leader_flag = klfis_exclude_leader_from_transfer
	}
	species = { is_sapient = yes }
}

# allows cyborgs to be considered robotic if the potential owner considers them to be robotic
# this = leader
# event_target:potential_owner = country to which the leader would transfer
is_robotic_species_lenient = {
	optimize_memory
	OR = {
		is_robotic_species = yes
		AND = {
			is_cyborg_species = yes
			event_target:potential_owner = { empire_considers_cyborgs_robotic = yes }
		}
	}
}

# this = leader
# event_target:potential_owner = country to which the leader would transfer
is_regular_empire_ethics_allowable_leader_species = {
	optimize_memory
	OR = {
		event_target:potential_owner = {
			klfis_is_necrophage_empire = no
			is_xenophobe = no
		}
		is_bypass_leader_restriction_honored_protectors = yes
	}
}

# this = leader
# event_target:potential_owner = country to which the leader would transfer
is_bypass_leader_restriction_honored_protectors = {
	optimize_memory
	is_military_leader = yes
	species = { has_species_flag = allow_military_leaders_honored_protectors@event_target:potential_owner }
}

# this = country
# $TRIGGER$ = the trigger that evaluates whether a leader's species is eligible for a particular form of assimilation
# event_target:potential_owner = country to which the leader would transfer
any_stored_leaders_eligible_to_transfer_main_species_leader_restricted = {
	optimize_memory
	any_owned_leader = {
		is_eligible_transfer_leader_from_storage = yes
		[[TRIGGER] $TRIGGER$ = yes ]
		OR = {
			is_same_species = event_target:potential_owner
			is_bypass_leader_restriction_honored_protectors = yes
		}
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
all_stored_leaders_same_species = {
	optimize_memory
	check_variable = {
		which = leader_accumulator
		value = leader_same_species_accumulator
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
all_stored_leaders_organic = {
	optimize_memory
	check_variable = {
		which = leader_accumulator
		value = leader_organic_accumulator
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
all_stored_leaders_organic_non_hive = {
	optimize_memory
	check_variable_arithmetic = {
		which = leader_accumulator
		subtract = leader_hive_accumulator
		subtract = leader_robotic_accumulator
		value = leader_organic_accumulator
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
all_stored_leaders_robotic = {
	optimize_memory
	check_variable = {
		which = leader_accumulator
		value = leader_robotic_accumulator
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
all_stored_leaders_hive = {
	optimize_memory
	check_variable = {
		which = leader_accumulator
		value = leader_hive_accumulator
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_any_stored_leaders_same_species = {
	optimize_memory
	check_variable = {
		which = leader_same_species_accumulator
		value > 0
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_any_stored_leaders_organic = {
	optimize_memory
	check_variable = {
		which = leader_organic_accumulator
		value > 0
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_any_stored_leaders_organic_non_hive = {
	optimize_memory
	check_variable_arithmetic = {
		which = leader_accumulator
		subtract = leader_hive_accumulator
		subtract = leader_robotic_accumulator
		value > 0
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_any_stored_leaders_robotic = {
	optimize_memory
	check_variable = {
		which = leader_robotic_accumulator
		value > 0
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_stored_leaders_both_robotic_and_organic = {
	optimize_memory
	has_any_stored_leaders_robotic = yes
	has_any_stored_leaders_organic = yes
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_stored_leaders_both_robotic_and_organic_non_hive = {
	optimize_memory
	has_any_stored_leaders_robotic = yes
	has_any_stored_leaders_organic_non_hive = yes
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_any_stored_leaders_hive = {
	optimize_memory
	check_variable = {
		which = leader_hive_accumulator
		value > 0
	}
}

# this = any, the scope must have the leader-count-related variables (see effects create_leader_storage_and_transfer_leaders and accumulate_leader)
has_any_stored_leaders_non_hive = {
	optimize_memory
	check_variable = {
		which = leader_hive_accumulator
		value < leader_accumulator
	}
}

# this = planet (after new owner set)
# from = country (new owner)
# fromfrom = country (former owner, if any)
has_leader_storage_from_country_to_planet_owner = {
	optimize_memory
	any_country = {
		has_country_flag = former_owner@fromfrom
		any_owned_leader = {
			has_leader_flag = former_owner@fromfrom
			has_leader_flag = potential_owner@from
		}
	}
}

# this follows the game's default rules - does not account for Gender Nonbinary Leaders
# this = leader, after species change
klfis_leader_species_allows_current_gender = {
	optimize_memory
	switch = {
		trigger = gender
		indeterminable = {
			species = {
				OR = {
					species_gender = indeterminable
					AND = {
						species_gender = not_set
						klfis_species_class_uses_gender = no
					}
				}
			}
		}
		female = {
			species = {
				OR = {
					AND = {
						species_gender = not_set
						klfis_species_class_uses_gender = yes
					}
					species_gender = female
				}
			}
		}
		male = {
			species = {
				OR = {
					AND = {
						species_gender = not_set
						klfis_species_class_uses_gender = yes
					}
					species_gender = male
				}
			}
		}
	}
}

# this = species
klfis_species_class_uses_gender = {
	optimize_memory
	# NOTE: this assumes custom species classes use gender (the default)
	NOR = {
		is_species_class = MACHINE
		is_species_class = ROBOT
		is_species_class = AI # contingency
		is_species_class = SWARM # praethoryn
		is_species_class = EXD # extradimensionals: unbidden/aberrant/vehement
		is_species_class = SALVAGER # salvager enclave species
		is_species_class = SHROUDWALKER # shroudwalker enclave species
		is_species_class = PARAGON # legendary galactic paragons
	}
}

# this = leader
klfis_has_species_trait_with_leader_trait = {
	optimize_memory
	species = {
		OR = {
			has_trait = trait_cybernetic
			has_trait = trait_erudite
			has_trait = trait_psionic
			has_trait = trait_latent_psionic
			has_trait = trait_brainslug
			has_trait = trait_clone_soldier_fertile
			# these clone soldier traits count for leader-keeping purposes
			has_trait = trait_clone_soldier_infertile
			has_trait = trait_clone_soldier_infertile_full_potential
		}
	}
}